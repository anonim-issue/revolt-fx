{"version":3,"file":"revoltfx.min.js","sources":["../../src/ComponentType.ts","../../src/util/LinkedList.ts","../../src/BaseEffect.ts","../../src/util/Rnd.ts","../../src/util/FXSignal.ts","../../src/ParticleEmitter.ts","../../src/EffectSequenceComponentType.ts","../../src/EffectSequence.ts","../../src/MovieClip.ts","../../src/util/Color.ts","../../src/util/Easing.ts","../../src/Particle.ts","../../src/Sanitizer.ts","../../src/Sprite.ts","../../src/core/BaseEmitterCore.ts","../../src/core/BoxEmitterCore.ts","../../src/core/CircleEmitterCore.ts","../../src/core/RingEmitterCore.ts","../../src/FX.ts"],"sourcesContent":["export enum ComponentType {\n    Sprite,\n    MovieClip\n}","export class LinkedList {\n\n    public __length: number;\n    public first: Node;\n    public last: Node;\n\n    constructor() {\n        this.__length = 0;\n    }\n\n    // *********************************************************************************************\n    // * Public\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                       *\n    // *********************************************************************************************\n    public get length(): number {\n        return this.__length;\n    }\n\n    public add(node: Node): LinkedList {\n        if (this.first == null) {\n            this.first = this.last = node;\n        } else {\n            node.prev = this.last;\n            this.last.next = node;\n            this.last = node;\n        }\n        node.list = this;\n        this.__length++;\n        return this;\n    }\n\n    public remove(node: Node): LinkedList {\n        if (node.list == null) {\n            return;\n        }\n\n        if (this.first === this.last) {\n            this.first = this.last = null;\n        } else if (this.__length > 0) {\n            if (node === this.last) {\n                node.prev.next = null;\n                this.last = node.prev;\n            } else if (node === this.first) {\n                node.next.prev = null;\n                this.first = node.next;\n            } else {\n                node.next.prev = node.prev;\n                node.prev.next = node.next;\n            }\n        }\n        node.next = node.prev = node.list = null;\n        this.__length--;\n        return this;\n    }\n\n    public clear() {\n        if (!this.first) return;\n        let node = this.first;\n        while (node) {\n            let next = node.next;\n            node.next = node.prev = node.list = null;\n            node = next;\n        }\n        this.first = this.last = null;\n    }\n\n    public toArray(): Node[] {\n        const ret: Node[] = [];\n        if (!this.first) return ret;\n        let node = this.first;\n        while (node) {\n            ret.push(node);\n            node = node.next;\n        }\n        return ret;\n    }\n\n}\n\nexport class Node {\n    public next: Node;\n    public prev: Node;\n    public list: LinkedList;\n\n    constructor(public data?: any) {\n\n    }\n\n    public update(dt: number) {\n\n    }\n\n    public dispose() {\n\n    }\n\n}\n","/// <reference types=\"pixi.js\" />\n\nimport * as PIXI from \"pixi.js\";\nimport { IEffectSequenceSettings, IEmitterSettings, FX, IParticleEmitterParent } from \"./FX\";\nimport { Node } from \"./util/LinkedList\";\n\nexport class BaseEffect extends Node {\n\n    public container!: PIXI.Container;\n    public exhausted: boolean = false;\n    public completed: boolean = false;\n\n    public name: string = \"\";\n\n    public endTime: number = 0;\n\n    protected _x: number = 0;\n    protected _y: number = 0;\n    protected _rotation: number = 0;\n    protected _alpha: number = 0;\n\n    protected _scale: PIXI.Point = new PIXI.Point();\n    protected _time: number = 0;\n\n    protected _active: boolean = false;\n\n    public __fx: FX;\n    public __recycled: boolean = true;\n\n\n    constructor(public componentId: string) {\n        super();\n    }\n\n    // *********************************************************************************************\n    // * Public\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                                           *\n    // *********************************************************************************************\n\n\n    public update(dt: number) {\n\n    }\n\n    public recycle() {\n\n    }\n\n    public get active(): boolean {\n        return this._active;\n    }\n\n    public get scale(): PIXI.Point {\n        return this._scale;\n    }\n\n    public set scale(value: PIXI.Point) {\n        this._scale = value;\n    }\n\n    public get alpha(): number {\n        return this._alpha;\n    }\n\n    public set alpha(value: number) {\n        this._alpha = value;\n    }\n\n    public set rotation(value: number) {\n        this._rotation = value;\n    }\n\n    public get rotation(): number {\n        return this._rotation;\n    }\n\n    public get y(): number {\n        return this._y;\n    }\n\n    public set y(value: number) {\n        this._y = value;\n    }\n\n    public get x(): number {\n        return this._x;\n    }\n\n    public set x(value: number) {\n        this._x = value;\n    }\n\n    // *********************************************************************************************\n    // * internal\t\t\t\t\t\t\t\t\t\t                                        \t\t\t\t\t\t\t\t\t\t   *\n    // *********************************************************************************************\n    public __applySettings(value: IEffectSequenceSettings | IEmitterSettings) {\n    }\n\n}\n","export class Rnd {\n  public static float(min: number, max: number): number {\n    return Math.random() * (max - min) + min;\n  }\n\n  public static bool(chance: number = 0.5): boolean {\n    return Math.random() < chance;\n  }\n\n  public static sign(chance: number = 0.5): number {\n    return Math.random() < chance ? 1 : -1;\n  }\n\n  public static bit(chance: number = 0.5): number {\n    return Math.random() < chance ? 1 : 0;\n  }\n\n  public static integer(min: number, max: number): number {\n    return Math.floor(Math.random() * (max - min) + min);\n  }\n}\n","import { LinkedList, Node } from \"./LinkedList\";\nimport { Particle } from \"../Particle\";\nimport { ParticleEmitter } from \"../ParticleEmitter\";\nimport { MovieClip } from \"../MovieClip\";\nimport { Sprite } from \"../Sprite\";\n\nexport class FXSignal {\n\n    public __hasCallback: boolean = false;\n    private _list: LinkedList = new LinkedList();\n\n\n    constructor() {\n    }\n\n    public add(callback: Function, scope?: any, callRate?: number) {\n        this._list.add(new Node(new FXSignalListener(callback, scope, false, callRate)));\n        this.__hasCallback = true;\n    }\n\n    public addOnce(callback: Function, scope?: any) {\n        this._list.add(new Node(new FXSignalListener(callback, scope, true)));\n        this.__hasCallback = true;\n    }\n\n    public dispatch(...params: any[]) {\n\n        const list = this._list;\n        let node = list.first;\n        let next;\n        while (node) {\n            next = node.next;\n            let call = true;\n            const data = <FXSignalListener>node.data;\n            if (data.callRate) {\n                if (data.calls % data.callRate != 0) {\n                    call = false;\n                }\n            }\n            if (call) {\n                data.callback.apply(data.scope, params);\n                if (data.once) {\n                    list.remove(node);\n                }\n            }\n            node = next;\n        }\n        this.__hasCallback = list.__length > 0;\n    }\n\n    public remove(callback: Function) {\n        const list = this._list;\n        let node = list.first;\n        let next;\n        while (node) {\n            next = node.next;\n            if (node.data.callback === callback) {\n                list.remove(node);\n                return;\n            }\n            node = next;\n        }\n        this.__hasCallback = list.__length > 0;\n    }\n\n    public removeAll() {\n        this._list.clear();\n        this.__hasCallback = false;\n    }\n\n}\n\nexport class FXSignalListener {\n    public calls: number = 0;\n    constructor(public callback: Function,\n        public scope?: any,\n        public once?: boolean,\n        public callRate?: number) { }\n}","/// <reference types=\"pixi.js\" />\n\nimport * as PIXI from \"pixi.js\";\nimport { BaseEffect } from \"./BaseEffect\";\nimport { IEmitterSettings, IMovieClipComponentParams, IParticleEmitterParent } from \"./FX\";\nimport { LinkedList } from \"./util/LinkedList\";\nimport { BaseEmitterCore } from \"./core/BaseEmitterCore\";\nimport { Particle } from \"./Particle\";\nimport { Rnd } from \"./util/Rnd\";\nimport { FXSignal } from \"./util/FXSignal\";\n\nexport interface IParticleEmitterSignals {\n    started: FXSignal;\n    completed: FXSignal;\n    exhausted: FXSignal;\n    particleSpawned: FXSignal;\n    particleBounced: FXSignal;\n    particleDied: FXSignal;\n    particleUpdated: FXSignal;\n}\n\n\nexport class ParticleEmitter extends BaseEffect implements IParticleEmitterParent {\n\n    public infinite: boolean;\n    public target: PIXI.DisplayObject;\n    public targetOffset: number = 0;\n\n    public core: BaseEmitterCore;\n\n    public settings: IEmitterSettings | undefined;\n    public autoRecycleOnComplete: boolean = true;\n\n    private _particles: LinkedList = new LinkedList();\n\n    private _particleCount: number = 0;\n    private _spawnOnComplete: boolean;\n    private _childEmitters: ParticleEmitter[] = [];\n    private _hasChildEmitters: boolean = false;\n\n    private _xPosIntialized: boolean;\n    private _yPosIntialized: boolean;\n\n    private _nextSpawnTime: number;\n    private _scaleMod: number;\n    private _paused: boolean = false;\n\n    public __parent: IParticleEmitterParent | undefined;\n    public __adoptRotation: boolean = false;\n\n    public __on: IParticleEmitterSignals = {\n        started: new FXSignal(),\n        completed: new FXSignal(),\n        exhausted: new FXSignal(),\n        particleUpdated: new FXSignal(),\n        particleSpawned: new FXSignal(),\n        particleBounced: new FXSignal(),\n        particleDied: new FXSignal()\n    };\n\n    constructor(componentId: string) {\n        super(componentId);\n    }\n\n    // *********************************************************************************************\n    // * Public\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                                        \t\t\t\t\t   *\n    // *********************************************************************************************\n    public init(container: PIXI.Container, autoStart: boolean = true, scaleMod: number = 1): ParticleEmitter {\n        this.container = container;\n        this.core.__scaleMod = this._scaleMod = scaleMod;\n        if (autoStart) this.start();\n        return this;\n    }\n\n    public start(): ParticleEmitter {\n        if (this._active) return this;\n\n        const t = Date.now();\n        const s = this.settings!;\n        const RX = this.__fx;\n\n        RX.emitterCount++;\n\n        this.infinite = s.infinite;\n        this._time = Number.MAX_VALUE;\n\n        if (s.duration > 0) {\n            this.endTime = t + s.duration * 1000;\n        } else {\n            this.endTime = s.duration;\n        }\n\n        this._nextSpawnTime = 0;\n        this._particleCount = 0;\n        this._active = true;\n        this.exhausted = this.completed = false;\n\n        RX.__addActiveEffect(this);\n\n        let l = s.childs.length;\n        this._hasChildEmitters = l > 0;\n        if (this._hasChildEmitters) {\n            while (--l > -1) {\n                const def = s.childs[l];\n                const em = RX.getParticleEmitterById(def.id);\n                const container = RX.__containers[em.settings!.containerId] || this.container;\n                em.init(container, true, (def.scale || 1) * (this._scaleMod || 1));\n                if (def.adoptRotation) {\n                    em.rotation = this._rotation;\n                    em.__adoptRotation = true;\n                }\n                em.__parent = this;\n                this._childEmitters.push(em);\n            }\n        }\n\n        this.rotation = this._rotation;\n\n        if (this.__on.started.__hasCallback) {\n            this.__on.started.dispatch(this);\n        }\n\n        return this;\n    }\n\n    public stop(waitForParticles: boolean = true) {\n        if (waitForParticles) {\n            this.exhausted = true;\n            if (this._hasChildEmitters) {\n                this.stopChildEmitters(true);\n            }\n        } else {\n\n            if (this.__on.completed.__hasCallback) {\n                this.__on.completed.dispatch(this);\n            }\n\n            if (this.autoRecycleOnComplete) {\n                this.recycle();\n            } else {\n                this.recycleParticles();\n                this.completed = true;\n                this._active = false;\n                this.__fx.__removeActiveEffect(this);\n            }\n        }\n    }\n\n    public update(dt: number): ParticleEmitter {\n\n        if (!this._active) return this;\n        const t = Date.now();\n\n        const s = this.settings!;\n\n        if (!this.exhausted) {\n            if (this.settings!.autoRotation !== 0) {\n                this.rotation += s.autoRotation * (dt / 0.016666);\n            }\n            if (this.target) {\n                this.rotation = this.target.rotation;\n                if (this.targetOffset == 0) {\n                    this.x = this.target.x;\n                    this.y = this.target.y;\n                } else {\n                    this.x = this.target.x + Math.cos(this._rotation) * this.targetOffset;\n                    this.y = this.target.y + Math.sin(this._rotation) * this.targetOffset;\n                }\n            }\n\n            if (this.endTime == 0 && !this.infinite) {\n                this.spawn();\n                this.exhausted = true;\n            } else if (this.infinite || t < this.endTime) {\n                this._time += dt;\n                if (this._time >= this._nextSpawnTime) {\n                    this._time = 0;\n                    this.spawn();\n                    this._nextSpawnTime = this._time + Rnd.float(s.spawnFrequencyMin, s.spawnFrequencyMax);\n                }\n            } else {\n                this.exhausted = true;\n                if (this.__on.exhausted.__hasCallback) {\n                    this.__on.exhausted.dispatch(this);\n                }\n            }\n        } else {\n            if (this._particleCount == 0) {\n                this._active = false;\n                this.completed = true;\n                if (this.__on.completed.__hasCallback) {\n                    this.__on.completed.dispatch(this);\n                }\n                this.__fx.__removeActiveEffect(this);\n                if (this.autoRecycleOnComplete) this.recycle();\n            }\n        }\n\n        const list = this._particles;\n        let node = <Particle>list.first;\n        let next;\n        while (node) {\n            next = <Particle>node.next;\n            node.update(dt);\n            node = next;\n        }\n        return this;\n    }\n\n    public spawn(): ParticleEmitter {\n        if (this._paused) return this;\n\n        const s = this.settings!;\n        const fx = this.__fx;\n\n        let n = Rnd.integer(s.spawnCountMin, s.spawnCountMax) * fx.particleFac;\n        this.core.prepare(n);\n\n        while (--n > -1) {\n            if (this._particleCount >= s.maxParticles || fx.particleCount >= fx.maxParticles) return this;\n\n            const ps = s.particleSettings;\n            const p = <Particle>fx.__getParticle();\n            let component;\n\n            switch (ps.componentType) {\n                case 0:\n                    p.componentId = <string>ps.componentId;\n                    component = fx.__getSprite(p.componentId);\n                    break;\n\n                case 1:\n                    p.componentId = <string>ps.componentId;\n                    component = fx.__getMovieClip(p.componentId);\n                    if (ps.componentParams) {\n                        component.loop = (<IMovieClipComponentParams>ps.componentParams).loop == null || !(<IMovieClipComponentParams>ps.componentParams).loop ? false : true;\n                        component.animationSpeed = Rnd.float((<IMovieClipComponentParams>ps.componentParams).animationSpeedMin || 1, (<IMovieClipComponentParams>ps.componentParams).animationSpeedMax || 1);\n                    }\n                    component.gotoAndPlay(0);\n                    break;\n            }\n\n            component.anchor.set(ps.componentParams.anchorX, ps.componentParams.anchorY);\n\n            p.component = component;\n            this.core.emit(p);\n            p.init(this, ps, this._scaleMod);\n\n            this._particles.add(p);\n            this._particleCount++;\n            fx.particleCount++;\n\n\n        }\n\n        this.core.step();\n\n        this._nextSpawnTime = Rnd.float(s.spawnFrequencyMin, s.spawnFrequencyMax);\n\n        return this;\n    }\n\n    public recycle() {\n\n        if (this.__recycled) return;\n\n        if (this.__parent) {\n            this.__parent.__removeChildEmitter(this);\n            this.__parent = undefined;\n        }\n\n        this.recycleParticles();\n\n        this.settings = undefined;\n        this._active = false;\n        this._paused = false;\n        this.completed = true;\n        this._x = this._y = this._rotation = 0;\n\n        if (this._hasChildEmitters) {\n            this.stopChildEmitters(true);\n            this._childEmitters.length = 0;\n            this._hasChildEmitters = false;\n        }\n\n        this.__fx.emitterCount--;\n        this.__fx.__recycleEmitter(this);\n        this.__recycled = true;\n        this.__adoptRotation = false;\n        this.core = null;\n        this.target = null;\n        this.name = null;\n\n        const on = this.__on;\n        if (on.completed.__hasCallback) on.completed.removeAll();\n        if (on.started.__hasCallback) on.started.removeAll();\n        if (on.exhausted.__hasCallback) on.exhausted.removeAll();\n        if (on.particleBounced.__hasCallback) on.particleBounced.removeAll();\n        if (on.particleDied.__hasCallback) on.particleDied.removeAll();\n        if (on.particleSpawned.__hasCallback) on.particleSpawned.removeAll();\n        if (on.particleUpdated.__hasCallback) on.particleUpdated.removeAll();\n    }\n\n    public dispose() {\n        const list = this._particles;\n        let node = <Particle>list.first;\n        let next;\n        while (node) {\n            next = <Particle>node.next;\n            node.recycle();\n            node = next;\n        }\n        list.clear();\n\n        this.__recycled = true;\n\n        if (this._hasChildEmitters) {\n            this.stopChildEmitters(false);\n        }\n\n        this.__fx.particleCount -= this._particleCount;\n\n        this._particles = null;\n        this.componentId = null;\n        this.settings = null;\n        this._active = false;\n        this.completed = true;\n        this._childEmitters = null;\n\n        if (this.core) {\n            this.core.dispose();\n        }\n        this.core = null;\n\n        this.target = null;\n        this.name = null;\n        const on = this.__on;\n        on.completed.removeAll();\n        on.started.removeAll();\n        on.exhausted.removeAll();\n        on.particleBounced.removeAll();\n        on.particleDied.removeAll();\n        on.particleSpawned.removeAll();\n        on.particleUpdated.removeAll();\n        this.__parent = null;\n\n        this.__fx.__removeActiveEffect(this);\n        this.__fx = null;\n    }\n\n    public get x(): number {\n        return this._x;\n    }\n\n    public set x(value: number) {\n        this._x = this.core.x = value;\n        if (!this._xPosIntialized) {\n            this.core.__x = value;\n            this._xPosIntialized = true;\n        }\n\n        if (this._hasChildEmitters) {\n            const childs = this._childEmitters;\n            let l = childs.length;\n            while (--l > -1) {\n                childs[l].x = value;\n            }\n        }\n    }\n\n    public get y(): number {\n        return this._y;\n    }\n\n    public set y(value: number) {\n        this._y = this.core.y = value;\n        if (!this._yPosIntialized) {\n            this.core.__y = value;\n            this._yPosIntialized = true;\n        }\n\n        if (this._hasChildEmitters) {\n            const childs = this._childEmitters;\n            let l = childs.length;\n            while (--l > -1) {\n                childs[l].y = value;\n            }\n        }\n    }\n\n\n    public set rotation(value: number) {\n        this._rotation = this.core.rotation = value;\n        if (this._hasChildEmitters) {\n            const childs = this._childEmitters;\n            let l = childs.length;\n            while (--l > -1) {\n                const child = childs[l];\n                if (child.__adoptRotation) {\n                    child.rotation = child.settings.rotation + value;\n                }\n            }\n        }\n    }\n\n    public get rotation(): number {\n        return this._rotation;\n    }\n\n    public get paused(): boolean {\n        return this._paused;\n    }\n\n    public set paused(value: boolean) {\n        this._paused = value;\n        if (this._hasChildEmitters) {\n            const childs = this._childEmitters;\n            let l = childs.length;\n            while (--l > -1) {\n                childs[l].paused = value;\n            }\n        }\n    }\n\n    public get on(): IParticleEmitterSignals {\n        return this.__on;\n    }\n\n    // *********************************************************************************************\n    // * Private\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                                           *\n    // *********************************************************************************************\n    private recycleParticles() {\n        let node = <Particle>this._particles.first;\n        let next;\n        while (node) {\n            next = <Particle>node.next;\n            node.recycle();\n            node = next;\n        }\n        this._particles.clear();\n        this.__fx.particleCount -= this._particleCount;\n    }\n\n    private stopChildEmitters(waitForParticles: boolean) {\n        const childs = this._childEmitters;\n        let l = childs.length;\n        while (--l > -1) {\n            childs[l].stop(waitForParticles);\n        }\n    }\n\n    // *********************************************************************************************\n    // * Internal\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                                           *\n    // *********************************************************************************************\n    public __removeParticle(particle: Particle) {\n\n        if (particle.useSpawns && this._spawnOnComplete) {\n            this.__subSpawn(particle, this.settings.particleSettings.spawn.onComplete);\n        }\n        this._particles.remove(particle);\n        this._particleCount--;\n        this.__fx.particleCount--;\n        particle.recycle();\n    }\n\n    public __removeChildEmitter(emitter: any) {\n        const index = this._childEmitters.indexOf(emitter);\n        if (index > -1) {\n            this._childEmitters.splice(index, 1);\n            if (this._childEmitters.length == 0) this._hasChildEmitters = false;\n        }\n    }\n\n    public __subSpawn(particle: Particle, list: any) {\n        const fx = this.__fx;\n        if (list) {\n            let l = list.length;\n            while (--l > -1) {\n                const def = list[l];\n                let component;\n                let container;\n                switch (def.type) {\n                    case 0:\n                        component = fx.getParticleEmitterById(def.id);\n                        container = fx.__containers[component.settings.containerId] || this.container;\n                        component.init(container, true, (def.scale || 1) * this._scaleMod);\n                        if (def.adoptRotation) {\n                            component.rotation = particle.component.rotation + component.settings.rotation;\n                            component.__adoptRotation = true;\n                        } else {\n                            component.rotation = component.settings.rotation;\n                        }\n                        break;\n                    case 1:\n                        component = fx.getEffectSequenceById(def.id);\n                        container = fx.__containers[component.settings.containerId] || this.container;\n                        component.init(container, 0, true, (def.scale || 1) * this._scaleMod);\n                        if (def.adoptRotation) {\n                            component.rotation = particle.component.rotation;\n                        }\n                        break;\n                }\n                component.x = particle.component.x;\n                component.y = particle.component.y;\n            }\n        }\n    }\n\n    public __applySettings(value: IEmitterSettings) {\n        const fx = this.__fx;\n\n        this.__recycled = this._xPosIntialized = this._yPosIntialized = false;\n\n        this.settings = value;\n        this.core = fx.__getEmitterCore(value.core.type, this);\n        this.core.init(this);\n        this.rotation = value.rotation;\n\n        this.name = value.name;\n\n        this._spawnOnComplete = value.particleSettings.spawn.onComplete.length > 0;\n\n        this._childEmitters.length = 0;\n\n    }\n\n    public __setCore(type: string) {\n        this.core = this.__fx.__getEmitterCore(type, this);\n        this.core.init(this);\n        this.core.__scaleMod = this._scaleMod;\n        this._xPosIntialized = this._yPosIntialized = false;\n    }\n\n    // *********************************************************************************************\n    // * Private\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                                        \t\t\t   *\n    // *********************************************************************************************\n\n    // *********************************************************************************************\n    // * Events\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                                        \t\t\t\t\t\t   *\n    // *********************************************************************************************\n}\n","export enum EffectSequenceComponentType {\n    Sprite,\n    MovieClip,\n    Emitter,\n    Trigger\n}","/// <reference types=\"pixi.js\" />\n\nimport * as PIXI from \"pixi.js\";\nimport { IEffectSequenceSettings, IEffectSettings, IMovieClipComponentParams } from \"./FX\";\nimport { BaseEffect } from \"./BaseEffect\";\nimport { LinkedList, Node } from \"./util/LinkedList\";\nimport { Sprite } from \"./Sprite\";\nimport { MovieClip } from \"./MovieClip\";\nimport { ParticleEmitter } from \"./ParticleEmitter\";\nimport { Rnd } from \"./util/Rnd\";\nimport { FXSignal } from \"./util/FXSignal\";\nimport { EffectSequenceComponentType } from \"./EffectSequenceComponentType\";\n\nexport interface IEffectSequenceSignals {\n    started: FXSignal;\n    completed: FXSignal;\n    exhausted: FXSignal;\n    effectSpawned: FXSignal;\n    triggerActivated: FXSignal;\n}\n\nexport class EffectSequence extends BaseEffect {\n\n    public settings!: IEffectSequenceSettings;\n\n    private _startTime!: number;\n\n    private _effectStartTime!: number;\n    private _nextEffectSettings!: IEffectSettings;\n\n    private _list: IEffectSettings[] = [];\n    private _index: number;\n    private _scaleMod!: number;\n    private _delay: number;\n\n    private _elements: LinkedList = new LinkedList();\n\n    public __on: IEffectSequenceSignals = {\n        started: new FXSignal(),\n        completed: new FXSignal(),\n        exhausted: new FXSignal(),\n        effectSpawned: new FXSignal(),\n        triggerActivated: new FXSignal()\n    };\n\n    constructor(componentId: string) {\n        super(componentId);\n    }\n\n    // *********************************************************************************************\n    // * Public\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                                        \t\t   *\n    // *********************************************************************************************\n    public init(container: PIXI.Container, delay: number = 0, autoStart: boolean = true, scaleMod: number = 1): EffectSequence {\n        this.container = container;\n        this._scaleMod = scaleMod;\n        this._delay = delay * 1000;\n        if (autoStart) this.start();\n        return this;\n    }\n\n    public start(): EffectSequence | undefined {\n        if (this._active) return;\n\n        this._startTime = Date.now() + (this.settings.delay ? this.settings.delay * 1000 : 0) + this._delay;\n        this._index = 0;\n\n        if (this._list.length == 0) {\n            this._active = false;\n            if (this.__on.exhausted.__hasCallback) {\n                this.__on.exhausted.dispatch(this);\n            }\n            if (this.__on.completed.__hasCallback) {\n                this.__on.completed.dispatch(this);\n            }\n            this.recycle();\n            return this;\n        }\n\n        this.exhausted = this.completed = false;\n\n        this.setNextEffect();\n\n        this.__fx.effectSequenceCount++;\n        this.__fx.__addActiveEffect(this);\n\n        if (this.__on.started.__hasCallback) {\n            this.__on.started.dispatch(this);\n        }\n        return this;\n    }\n\n    public update(dt: number) {\n        const t = Date.now();\n        if (t < this._startTime) return;\n        this._time += dt;\n\n        if (!this.exhausted && t >= this._effectStartTime) {\n            const fx = this.__fx;\n            const def = this._nextEffectSettings;\n            let effect: Sprite | MovieClip | ParticleEmitter;\n            let node: Node;\n            let container: PIXI.Container;\n\n            switch (def.componentType) {\n                case EffectSequenceComponentType.Sprite:\n                    effect = fx.__getSprite(def.componentId);\n                    container = fx.__containers[def.containerId] || this.container;\n                    container.addChild(<Sprite>effect);\n                    (<Sprite>effect).blendMode = fx.useBlendModes ? def.blendMode : 0;\n                    (<Sprite>effect).tint = def.tint;\n                    (<Sprite>effect).scale.set(Rnd.float(def.scaleMin, def.scaleMax) * Rnd.float(this.settings.scaleMin, this.settings.scaleMax) * this._scaleMod);\n                    (<Sprite>effect).alpha = Rnd.float(def.alphaMin, def.alphaMax);\n                    (<Sprite>effect).anchor.set(def.componentParams.anchorX, def.componentParams.anchorY);\n\n                    node = new Node({ component: effect, endTime: t + (def.duration) * 1000 });\n                    this._elements.add(node);\n                    effect.x = this._x;\n                    effect.y = this._y;\n                    effect.rotation = this._rotation + Rnd.float(def.rotationMin, def.rotationMax);\n                    if (this.__on.effectSpawned.__hasCallback) {\n                        this.__on.effectSpawned.dispatch(EffectSequenceComponentType.Sprite, effect);\n                    }\n                    break;\n\n                case EffectSequenceComponentType.MovieClip:\n                    effect = fx.__getMovieClip(def.componentId);\n                    if ((<IMovieClipComponentParams>def.componentParams).loop) {\n                        (<MovieClip>effect).animationSpeed = Rnd.float((<IMovieClipComponentParams>def.componentParams).animationSpeedMin || 1, (<IMovieClipComponentParams>def.componentParams).animationSpeedMax || 1);\n                        (<MovieClip>effect).loop = (<IMovieClipComponentParams>def.componentParams).loop || false;\n                    } else {\n                        const speed = def.duration\n                    }\n\n\n                    (<MovieClip>effect).anchor.set(def.componentParams.anchorX, def.componentParams.anchorY);\n\n                    (<MovieClip>effect).gotoAndPlay(0);\n                    container = fx.__containers[def.containerId] || this.container;\n                    container.addChild(<MovieClip>effect);\n                    (<MovieClip>effect).blendMode = fx.useBlendModes ? def.blendMode : 0;\n                    (<MovieClip>effect).tint = def.tint;\n                    (<MovieClip>effect).scale.set(Rnd.float(def.scaleMin, def.scaleMax) * Rnd.float(this.settings.scaleMin, this.settings.scaleMax) * this._scaleMod);\n                    (<MovieClip>effect).alpha = Rnd.float(def.alphaMin, def.alphaMax);\n\n\n                    node = new Node({ component: effect, endTime: t + (def.duration) * 1000 });\n                    this._elements.add(node);\n                    effect.x = this._x;\n                    effect.y = this._y;\n                    effect.rotation = this._rotation + Rnd.float(def.rotationMin, def.rotationMax);\n                    if (this.__on.effectSpawned.__hasCallback) {\n                        this.__on.effectSpawned.dispatch(EffectSequenceComponentType.MovieClip, effect);\n                    }\n                    break;\n\n                case EffectSequenceComponentType.Emitter:\n                    effect = fx.getParticleEmitterById(def.componentId);\n                    container = fx.__containers[def.containerId] || this.container;\n                    (<ParticleEmitter>effect).init(container, true, Rnd.float(def.scaleMin, def.scaleMax) * Rnd.float(this.settings.scaleMin, this.settings.scaleMax) * this._scaleMod);\n                    node = new Node({ component: effect, endTime: (<ParticleEmitter>effect).endTime });\n                    this._elements.add(node);\n                    effect.x = this._x;\n                    effect.y = this._y;\n                    effect.rotation = this._rotation + effect.settings.rotation;\n                    if (this.__on.effectSpawned.__hasCallback) {\n                        this.__on.effectSpawned.dispatch(EffectSequenceComponentType.Emitter, effect);\n                    }\n                    break;\n\n                case EffectSequenceComponentType.Trigger:\n                    if (this.__on.triggerActivated.__hasCallback) {\n                        this.__on.triggerActivated.dispatch(def.triggerValue);\n                    }\n                    break;\n            }\n\n            if (this._index == this._list.length) {\n                this.exhausted = true;\n                if (this.__on.exhausted.__hasCallback) {\n                    this.__on.exhausted.dispatch(this);\n                }\n            } else {\n                this.setNextEffect();\n            }\n        }\n\n        const list = this._elements;\n        let node = list.first;\n        while (node) {\n            node.update(dt);\n            if (t > node.data.endTime) {\n                const component = node.data.component;\n                if (component instanceof ParticleEmitter) {\n                    if (component.completed) {\n                        list.remove(node);\n                    }\n                } else {\n                    list.remove(node);\n                    component.recycle();\n                }\n            }\n            node = node.next;\n        }\n        if (this.exhausted && list.length == 0) {\n            this._active = false;\n            this.completed = true;\n            if (this.__on.completed.__hasCallback) {\n                this.__on.completed.dispatch(this);\n            }\n            this.recycle();\n        }\n    }\n\n    public stop() {\n        this.recycle();\n    }\n\n    public recycle() {\n        if (this.__recycled) return;\n        const list = this._elements;\n        let node = list.first;\n        let next;\n        while (node) {\n            next = node.next;\n            node.data.component.recycle();\n            node = next;\n        }\n\n        const on = this.__on;\n        if (on.completed.__hasCallback) on.completed.removeAll();\n        if (on.started.__hasCallback) on.started.removeAll();\n        if (on.exhausted.__hasCallback) on.exhausted.removeAll();\n        if (on.effectSpawned.__hasCallback) on.effectSpawned.removeAll();\n        if (on.triggerActivated.__hasCallback) on.triggerActivated.removeAll();\n\n        list.clear();\n        this.__recycled = true;\n        this._x = this._y = this._rotation = 0;\n        this.__fx.effectSequenceCount--;\n        this.__fx.__recycleEffectSequence(this);\n    }\n\n    public dispose() {\n        this._elements.clear();\n        this.__fx = undefined;\n        const on = this.__on;\n        on.completed = on.started = on.exhausted = on.effectSpawned = on.triggerActivated = undefined;\n    }\n\n    public set rotation(value: number) {\n        this._rotation = value;\n        const list = this._elements;\n        let node = list.first;\n        let next;\n        while (node) {\n            next = node.next;\n            node.data.rotation = value;\n            node = next;\n        }\n    }\n\n\n    public get x(): number {\n        return this._x;\n    }\n\n    public set x(value: number) {\n        this._x = value;\n        const list = this._elements;\n        let node = list.first;\n        let next;\n        while (node) {\n            next = node.next;\n            node.data.x = value;\n            node = next;\n        }\n    }\n\n    public get y(): number {\n        return this._y;\n    }\n\n    public set y(value: number) {\n        this._y = value;\n        const list = this._elements;\n        let node = list.first;\n        let next;\n        while (node) {\n            next = node.next;\n            node.data.y = value;\n            node = next;\n        }\n    }\n\n    public get rotation(): number {\n        return this._rotation;\n    }\n\n    public get on(): IEffectSequenceSignals {\n        return this.__on;\n    }\n\n    // *********************************************************************************************\n    // * Private\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t           *                              \t\t   \n    // *********************************************************************************************\n\n    private setNextEffect() {\n        if (this.exhausted) return;\n        const def = this._nextEffectSettings = this._list[this._index++];\n        this._effectStartTime = this._startTime + def.delay * 1000;\n    }\n\n    // *********************************************************************************************\n    // * Internal\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t           *                              \t\t   \n    // *********************************************************************************************\n    public __applySettings(value: IEffectSequenceSettings) {\n        this.settings = value;\n        this.name = value.name;\n        this._list = value.effects.slice();\n        this.__recycled = false;\n    }\n}\n\n","/// <reference types=\"pixi.js\" />\n\nimport { FX } from \"./FX\";\nimport * as PIXI from 'pixi.js';\n\nexport class MovieClip extends PIXI.AnimatedSprite {\n\n    public componentId: string;\n    public __sequenceEndTime: number;\n    public __fx: FX;\n\n    constructor(componentId: string, textures: string[], anchorX?: number, anchorY?: number) {\n        let t = <PIXI.Texture[]>[];\n        let l = textures.length;\n        for (let i = 0; i < l; i++) {\n            t.push(PIXI.Texture.from(textures[i]));\n        }\n        super(t);\n        this.componentId = componentId;\n        this.anchor.set(0.5, 0.5);\n        this.loop = false;\n        this.__sequenceEndTime = 0;\n    }\n\n    // *********************************************************************************************\n    // * Public\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                                        \t\t\t   *\n    // *********************************************************************************************\n    public recycle() {\n        this.alpha = 1;\n        this.tint = 0xffffff;\n        this.rotation = 0;\n        this.scale.set(1);\n        if (this.parent) this.parent.removeChild(this);\n        this.gotoAndStop(0);\n        this.__fx.__recycleMovieClip(this.componentId, this);\n    }\n\n    public dispose() {\n        if (this.parent) this.parent.removeChild(this);\n        this.gotoAndStop(0);\n        this.destroy();\n    }\n\n    // *********************************************************************************************\n    // * Private\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   *\n    // *********************************************************************************************\n\n    // *********************************************************************************************\n    // * Events\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t               *\n    // *********************************************************************************************\n\n}\n","export class Color {\n\n\n  public r: number;\n  public g: number;\n  public b: number;\n\n  public sR: number;\n  public sG: number;\n  public sB: number;\n\n  public dR: number;\n  public dG: number;\n  public dB: number;\n\n  public rgb: number;\n\n  public startRgb: number;\n  public targetRgb: number;\n\n  constructor() {\n  }\n\n  // *********************************************************************************************\n  // * Public\t\t\t\t\t\t\t\t\t                                        \t\t\t\t\t\t\t\t\t\t\t\t   *\n  // *********************************************************************************************\n\n  public setRgb(startRgb: number, targetRgb: number) {\n    this.startRgb = this.rgb = startRgb;\n    this.r = this.sR = (startRgb >> 16) & 0xff;\n    this.g = this.sG = (startRgb >> 8) & 0xff;\n    this.b = this.sB = startRgb & 0xff;\n\n    this.targetRgb = targetRgb;\n\n    this.dR = ((targetRgb >> 16) & 0xff) - this.r;\n    this.dG = ((targetRgb >> 8) & 0xff) - this.g;\n    this.dB = (targetRgb & 0xff) - this.b;\n  }\n\n  public tween(ease: Function, time: number, duration: number): number {\n    if (ease) {\n      this.r = ease(time, this.sR, this.dR, duration);\n      this.g = ease(time, this.sG, this.dG, duration);\n      this.b = ease(time, this.sB, this.dB, duration);\n    } else {\n      time /= duration;\n      this.r = this.dR * time + this.sR;\n      this.g = this.dG * time + this.sG;\n      this.b = this.dB * time + this.sB;\n    }\n\n    this.rgb = (this.r << 16) | (this.g << 8) | this.b;\n    return this.rgb;\n  }\n\n\n  // *********************************************************************************************\n  // * Private\t\t\t\t\t                                        \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   *\n  // *********************************************************************************************\n\n  // *********************************************************************************************\n  // * Events\t\t\t\t\t\t\t\t\t\t                                        \t\t\t\t\t\t\t\t\t\t\t   *\n  // *********************************************************************************************\n\n}\n","export class Easing {\n\n  public static linear(t: number, b: number, c: number, d: number): number {\n    return c * t / d + b;\n  }\n\n  public static easeInQuad(t: number, b: number, c: number, d: number): number {\n    return c * (t /= d) * t + b;\n  }\n\n  public static easeOutQuad(t: number, b: number, c: number, d: number): number {\n    return -c * (t /= d) * (t - 2) + b;\n  }\n\n\n  public static easeInOutQuad(t: number, b: number, c: number, d: number): number {\n    if ((t /= d / 2) < 1) {\n      return c / 2 * t * t + b;\n    } else {\n      return -c / 2 * ((--t) * (t - 2) - 1) + b;\n    }\n  }\n\n  public static easeInCubic(t: number, b: number, c: number, d: number): number {\n    return c * (t /= d) * t * t + b;\n  }\n\n  public static easeOutCubic(t: number, b: number, c: number, d: number): number {\n    return c * ((t = t / d - 1) * t * t + 1) + b;\n  }\n\n  public static easeInOutCubic(t: number, b: number, c: number, d: number): number {\n    if ((t /= d / 2) < 1) {\n      return c / 2 * t * t * t + b;\n    } else {\n      return c / 2 * ((t -= 2) * t * t + 2) + b;\n    }\n  }\n\n  public static easeInQuart(t: number, b: number, c: number, d: number): number {\n    return c * (t /= d) * t * t * t + b;\n  }\n\n  public static easeOutQuart(t: number, b: number, c: number, d: number): number {\n    return -c * ((t = t / d - 1) * t * t * t - 1) + b;\n  }\n\n  public static easeInOutQuart(t: number, b: number, c: number, d: number): number {\n    if ((t /= d / 2) < 1) {\n      return c / 2 * t * t * t * t + b;\n    } else {\n      return -c / 2 * ((t -= 2) * t * t * t - 2) + b;\n    }\n  }\n\n  public static easeInQuint(t: number, b: number, c: number, d: number): number {\n    return c * (t /= d) * t * t * t * t + b;\n  }\n\n  public static easeOutQuint(t: number, b: number, c: number, d: number): number {\n    return c * ((t = t / d - 1) * t * t * t * t + 1) + b;\n  }\n\n  public static easeInOutQuint(t: number, b: number, c: number, d: number): number {\n    if ((t /= d / 2) < 1) {\n      return c / 2 * t * t * t * t * t + b;\n    } else {\n      return c / 2 * ((t -= 2) * t * t * t * t + 2) + b;\n    }\n  }\n\n  public static easeInSine(t: number, b: number, c: number, d: number): number {\n    return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;\n  }\n\n  public static easeOutSine(t: number, b: number, c: number, d: number): number {\n    return c * Math.sin(t / d * (Math.PI / 2)) + b;\n  }\n\n  public static easeInOutSine(t: number, b: number, c: number, d: number): number {\n    return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;\n  }\n\n  public static easeInExpo(t: number, b: number, c: number, d: number): number {\n    if (t === 0) {\n      return b;\n    } else {\n      return c * Math.pow(2, 10 * (t / d - 1)) + b;\n    }\n  }\n\n  public static easeOutExpo(t: number, b: number, c: number, d: number): number {\n    if (t === d) {\n      return b + c;\n    } else {\n      return c * (-Math.pow(2, -10 * t / d) + 1) + b;\n    }\n  }\n\n  public static easeInOutExpo(t: number, b: number, c: number, d: number): number {\n    if (t === 0) {\n      b;\n    }\n    if (t === d) {\n      b + c;\n    }\n    if ((t /= d / 2) < 1) {\n      return c / 2 * Math.pow(2, 10 * (t - 1)) + b;\n    } else {\n      return c / 2 * (-Math.pow(2, -10 * --t) + 2) + b;\n    }\n  }\n\n  public static easeInCirc(t: number, b: number, c: number, d: number): number {\n    return -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;\n  }\n\n  public static easeOutCirc(t: number, b: number, c: number, d: number): number {\n    return c * Math.sqrt(1 - (t = t / d - 1) * t) + b;\n  }\n\n  public static easeInOutCirc(t: number, b: number, c: number, d: number): number {\n    if ((t /= d / 2) < 1) {\n      return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b;\n    } else {\n      return c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;\n    }\n  }\n\n  public static easeInElastic(t: number, b: number, c: number, d: number): number {\n    let a: number, p: number, s: number;\n    s = 1.70158;\n    p = 0;\n    a = c;\n    if (t === 0) {\n      b;\n    } else if ((t /= d) === 1) {\n      b + c;\n    }\n    if (!p) {\n      p = d * .3;\n    }\n    if (a < Math.abs(c)) {\n      a = c;\n      s = p / 4;\n    } else {\n      s = p / (2 * Math.PI) * Math.asin(c / a);\n    }\n    return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;\n  }\n\n  public static easeOutElastic(t: number, b: number, c: number, d: number): number {\n    let a: number, p: number, s: number;\n    s = 1.70158;\n    p = 0;\n    a = c;\n    if (t === 0) {\n      b;\n    } else if ((t /= d) === 1) {\n      b + c;\n    }\n    if (!p) {\n      p = d * .3;\n    }\n    if (a < Math.abs(c)) {\n      a = c;\n      s = p / 4;\n    } else {\n      s = p / (2 * Math.PI) * Math.asin(c / a);\n    }\n    return a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c + b;\n  }\n\n  public static easeInOutElastic(t: number, b: number, c: number, d: number): number {\n    let a: number, p: number, s: number;\n    s = 1.70158;\n    p = 0;\n    a = c;\n    if (t === 0) {\n      b;\n    } else if ((t /= d / 2) === 2) {\n      b + c;\n    }\n    if (!p) {\n      p = d * (.3 * 1.5);\n    }\n    if (a < Math.abs(c)) {\n      a = c;\n      s = p / 4;\n    } else {\n      s = p / (2 * Math.PI) * Math.asin(c / a);\n    }\n    if (t < 1) {\n      return -.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;\n    } else {\n      return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p) * .5 + c + b;\n    }\n  }\n\n  public static easeInBack(t: number, b: number, c: number, d: number, s: number): number {\n    if (s === void 0) {\n      s = 1.70158;\n    }\n    return c * (t /= d) * t * ((s + 1) * t - s) + b;\n  }\n\n  public static easeOutBack(t: number, b: number, c: number, d: number, s: number): number {\n    if (s === void 0) {\n      s = 1.70158;\n    }\n    return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;\n  }\n\n  public static easeInOutBack(t: number, b: number, c: number, d: number, s: number): number {\n    if (s === void 0) {\n      s = 1.70158;\n    }\n    if ((t /= d / 2) < 1) {\n      return c / 2 * (t * t * (((s *= 1.525) + 1) * t - s)) + b;\n    } else {\n      return c / 2 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2) + b;\n    }\n  }\n\n  public static easeInBounce(t: number, b: number, c: number, d: number): number {\n    let v: number;\n    v = Easing.easeOutBounce(d - t, 0, c, d);\n    return c - v + b;\n  }\n\n  public static easeOutBounce(t: number, b: number, c: number, d: number): number {\n    if ((t /= d) < 1 / 2.75) {\n      return c * (7.5625 * t * t) + b;\n    } else if (t < 2 / 2.75) {\n      return c * (7.5625 * (t -= 1.5 / 2.75) * t + .75) + b;\n    } else if (t < 2.5 / 2.75) {\n      return c * (7.5625 * (t -= 2.25 / 2.75) * t + .9375) + b;\n    } else {\n      return c * (7.5625 * (t -= 2.625 / 2.75) * t + .984375) + b;\n    }\n  }\n\n  public static easeInOutBounce(t: number, b: number, c: number, d: number): number {\n    let v: number;\n    if (t < d / 2) {\n      v = Easing.easeInBounce(t * 2, 0, c, d);\n      return v * .5 + b;\n    } else {\n      v = Easing.easeOutBounce(t * 2 - d, 0, c, d);\n      return v * .5 + c * .5 + b;\n    }\n  }\n}\n","/// <reference types=\"pixi.js\" />\n\nimport * as PIXI from \"pixi.js\";\nimport { Node } from \"./util/LinkedList\";\nimport { IParticle, IParticleSettings, FX, IParticleEmitterParent } from \"./FX\";\nimport { Sprite } from \"./Sprite\";\nimport { ParticleEmitter } from \"./ParticleEmitter\";\nimport { Color } from \"./util/Color\";\nimport { Easing } from \"./util/Easing\";\nimport { Rnd } from \"./util/Rnd\";\nimport { MovieClip } from \"./MovieClip\";\nimport { FXSignal } from \"./util/FXSignal\";\n\nexport interface IParticleSignals {\n    died: FXSignal;\n    bounced: FXSignal;\n    updated: FXSignal;\n}\n\n\nexport class Particle extends Node implements IParticle, IParticleEmitterParent {\n\n    public component: Sprite | MovieClip;\n    public duration: number;\n\n    public distance: number;\n    public startX: number;\n    public startY: number;\n    public deltaX: number;\n    public deltaY: number;\n    public distanceEase: Function;\n\n    public useFadeIn: boolean;\n    public fadeInEase: Function;\n    public fadeInDuration: number;\n\n    public alphaStart: number;\n    public alphaDelta: number;\n    public alphaEase: Function;\n    public alphaDuration: number;\n\n    public useTint: boolean;\n    public tintStart: number;\n    public tintEnd: number;\n    public tintEase: Function;\n\n    public useMotion: boolean;\n    public useScale: boolean;\n    public useAlpha: boolean;\n    public useSpawns: boolean;\n    public useChilds: boolean;\n\n    public uniformScale: boolean;\n\n    public useScaleIn: boolean;\n    public scaleInEase: Function;\n    public scaleInDuration: number;\n\n    public scaleStart: number;\n    public scaleDelta: number;\n    public scaleEase: Function;\n    public scaleDuration: number;\n\n    public scaleXStart: number;\n    public scaleXDelta: number;\n    public scaleXEase: Function;\n    public scaleXDuration: number;\n\n    public scaleYStart: number;\n    public scaleYDelta: number;\n    public scaleYEase: Function;\n    public scaleYDuration: number;\n\n    public useRotation: boolean;\n    public rotationSpeed: number;\n    public rotationEnd: number;\n\n    public useGravity: boolean;\n    public gravity: number;\n    public moveSpeedX: number;\n    public moveSpeedY: number;\n    public useFloor: boolean;\n    public floorY: number;\n    public bounceFac: number;\n    public friction: number;\n    public useAlign: boolean;\n\n    public dx: number = 0;\n    public dy: number = 0;\n\n    public emitter: ParticleEmitter;\n\n    public settings: IParticleSettings;\n\n    public componentId: string;\n\n    public time: number;\n\n    private _color: Color;\n    private _dt: number;\n\n    private _spawnOnBounce: Boolean;\n\n    private _childEmitters: ParticleEmitter[] = [];\n    private _hasChildEmitters: boolean = false;\n    private _spawnOnHalfway: boolean = false;\n\n    public __recycled: boolean = true;\n    public __fx: FX;\n    public __parent: IParticleEmitterParent;\n    public __on: IParticleSignals = {\n        died: new FXSignal(),\n        bounced: new FXSignal(),\n        updated: new FXSignal()\n    };\n\n    constructor() {\n        super();\n        this._color = new Color();\n    }\n\n    // *********************************************************************************************\n    // * Public\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                                        \t\t\t\t   *\n    // *********************************************************************************************\n\n    public init(emitter: ParticleEmitter, settings: IParticleSettings, scaleMod?: number): IParticle {\n\n        const component = this.component;\n        const fx = this.__fx;\n\n        this.emitter = emitter;\n        this.settings = settings;\n        const duration = this.duration = Rnd.float(settings.durationMin, settings.durationMax) * scaleMod;\n\n        this._dt = 1 / this.duration;\n        this.time = 0;\n        this.__recycled = false;\n\n        settings.addOnTop ? emitter.container.addChild(component) : emitter.container.addChildAt(component, 0);\n\n        component.blendMode = fx.useBlendModes ? (settings.blendMode) : 0;\n\n        this.startX = component.x;\n        this.startY = component.y;\n\n        this.useGravity = emitter.settings.useGravity;\n        this.useScale = settings.useScale;\n        this.useRotation = settings.useRotation;\n        this.useAlpha = settings.useAlpha;\n        this.useTint = settings.useTint;\n        this.useSpawns = settings.useSpawns;\n        this.useChilds = settings.useChilds;\n        this.useMotion = settings.useMotion;\n\n        if (this.useGravity) {\n            this.gravity = emitter.settings.gravity;\n            this.useFloor = emitter.settings.useFloor;\n            this.floorY = emitter.settings.floorY;\n            this.bounceFac = Rnd.float(settings.bounceFacMin, settings.bounceFacMax) * scaleMod;\n            this.friction = 1 - Rnd.float(settings.frictionMin, settings.frictionMax) * scaleMod;\n            this._spawnOnBounce = settings.spawn.onBounce.length > 0;\n            this.useAlign = settings.align;\n            if (settings.useMotion) {\n                const speed = Rnd.float(settings.moveSpeedMin, settings.moveSpeedMax);\n                this.moveSpeedX = speed * this.dx * scaleMod;\n                this.moveSpeedY = speed * this.dy * scaleMod;\n            } else {\n                this.moveSpeedX = this.moveSpeedY = 0;\n            }\n\n        } else {\n            if (settings.useMotion) {\n                const d = this.distance = Rnd.integer(settings.distanceMin, settings.distanceMax) * 0.8 * scaleMod;\n                this.deltaX = ((component.x + d * this.dx) - this.startX) * 0.8;\n                this.deltaY = ((component.y + d * this.dy) - this.startY) * 0.8;\n                this.distanceEase = (Easing as any)[settings.distanceEase];\n                this.useAlign = false;\n            } else {\n                component.x = this.startX;\n                component.y = this.startY;\n            }\n        }\n\n\n        if (settings.useRotation && settings.randomStartRotation && !this.useAlign) {\n            component.rotation = Rnd.float(0, 6.28319);\n        }\n\n        if (settings.useAlpha) {\n            this.alphaStart = component.alpha = Rnd.float(settings.alphaStartMin, settings.alphaStartMax);\n            this.alphaDelta = Rnd.float(settings.alphaEndMin, settings.alphaEndMax) - this.alphaStart;\n            this.alphaEase = (Easing as any)[settings.alphaEase] || null;\n\n            this.useFadeIn = settings.fadeIn;\n            if (settings.fadeIn) {\n                this.alphaDuration = duration * (1 - settings.fadeInDurationFac);\n                this.fadeInDuration = duration * settings.fadeInDurationFac;\n                this.fadeInEase = (Easing as any)[settings.fadeInEase || 'easeInSine'];\n            }\n        }\n\n\n        if (settings.useScale) {\n            this.uniformScale = settings.uniformScale;\n            this.useScaleIn = settings.scaleIn;\n\n            if (settings.useScale) {\n                this.uniformScale = settings.uniformScale;\n                this.scaleEase = (Easing as any)[settings.scaleEase];\n\n                if (settings.uniformScale) {\n                    this.scaleStart = component.scale.x = component.scale.y = Rnd.float(settings.scaleStartMin, settings.scaleStartMax) * scaleMod;\n                    this.scaleDelta = (Rnd.float(settings.scaleEndMin, settings.scaleEndMax) - this.scaleStart) * scaleMod;\n                } else {\n                    this.scaleXStart = component.scale.x = Rnd.float(settings.scaleXStartMin, settings.scaleXStartMax) * scaleMod;\n                    this.scaleXDelta = (Rnd.float(settings.scaleXEndMin, settings.scaleXEndMax) - this.scaleXStart) * scaleMod;\n                    this.scaleXEase = (Easing as any)[settings.scaleXEase];\n                    this.scaleYStart = component.scale.y = Rnd.float(settings.scaleYStartMin, settings.scaleYStartMax) * scaleMod;\n                    this.scaleYDelta = (Rnd.float(settings.scaleYEndMin, settings.scaleYEndMax) - this.scaleYStart) * scaleMod;\n                    this.scaleYEase = (Easing as any)[settings.scaleYEase];\n                }\n\n                if (settings.scaleIn) {\n                    this.scaleDuration = duration * (1 - settings.scaleInDurationFac);\n                    this.scaleInDuration = duration * settings.scaleInDurationFac;\n                    this.scaleInEase = (Easing as any)[settings.scaleInEase || 'easeInSine'];\n                }\n\n            } else {\n                if (settings.uniformScale) {\n                    component.scale.x = settings.scaleStartMin;\n                    component.scale.y = settings.scaleStartMin;\n                } else {\n                    component.scale.x = settings.scaleXStartMin;\n                    component.scale.y = settings.scaleYStartMin;\n                }\n            }\n        }\n\n\n        if (settings.useRotation) {\n            this.rotationSpeed = Rnd.float(settings.rotationSpeedMin, settings.rotationSpeedMax) * scaleMod;\n            if (settings.randomRotationDirection) this.rotationSpeed *= Rnd.sign();\n        }\n\n        if (settings.useTint) {\n            this.tintEase = (Easing as any)[settings.tintEase];\n            this._color.setRgb(settings.tintStart, settings.tintEnd);\n        }\n\n        if (settings.useChilds) {\n            this._childEmitters.length = 0;\n            let l = settings.childs.length;\n            this._hasChildEmitters = l > 0;\n            if (this._childEmitters) {\n                while (--l > -1) {\n                    const def = settings.childs[l];\n                    const em = fx.getParticleEmitterById(def.id);\n                    em.init(emitter.container, true, (def.scale || 1) * (scaleMod || 1));\n                    if (def.adoptRotation) {\n                        em.rotation = component.rotation;\n                        em.__adoptRotation = true;\n                    }\n                    em.__parent = this;\n                    this._childEmitters.push(em);\n                }\n            }\n        }\n\n        if (settings.useSpawns) {\n\n            if (settings.spawn.onStart.length > 0) {\n                emitter.__subSpawn(this, settings.spawn.onStart);\n            }\n            this._spawnOnHalfway = settings.spawn.onHalfway.length > 0;\n        }\n\n        if (emitter.__on.particleSpawned.__hasCallback) {\n            emitter.__on.particleSpawned.dispatch(this);\n        }\n\n        return this;\n    }\n\n    public update(dt: number) {\n\n        const t = this.time += dt;\n        const duration = this.duration;\n\n        if (t >= duration) {\n            this.emitter.__removeParticle(this);\n            return;\n        }\n\n        const component = this.component;\n        const mod = t * dt;\n\n        //Motion\n        if (this.useGravity) {\n            const dt2 = dt / 0.0166666;\n            component.x += this.moveSpeedX * dt2;\n            component.y += this.moveSpeedY * dt2;\n            this.moveSpeedY += this.gravity * dt2;\n\n            if (this.useAlign) {\n                component.rotation = Math.atan2(this.moveSpeedY, this.moveSpeedX);\n            }\n\n            if (this.useFloor && this.floorY > 0) {\n                if (component.y > this.floorY) {\n                    component.y = this.floorY;\n                    this.moveSpeedY *= -this.bounceFac;\n                    this.moveSpeedX *= this.friction;\n\n                    if (this.useSpawns && this._spawnOnBounce) {\n                        this.emitter.__subSpawn(this, this.settings.spawn.onBounce);\n                    }\n\n                    const emitter = this.emitter;\n                    if (emitter.__on.particleBounced.__hasCallback) {\n                        emitter.__on.particleBounced.dispatch(this);\n                    }\n                    if (this.__on.bounced.__hasCallback) {\n                        this.__on.bounced.dispatch(this);\n                    }\n\n                    if (this.settings.stopOnBounce) {\n                        emitter.__removeParticle(this);\n                    }\n                    return;\n                }\n            }\n        } else if (this.useMotion) {\n            if (this.distanceEase) {\n                component.x = this.distanceEase(t, this.startX, this.deltaX, duration);\n                component.y = this.distanceEase(t, this.startY, this.deltaY, duration);\n            } else {\n                component.x = this.deltaX * mod + this.startX;\n                component.y = this.deltaY * mod + this.startY;\n            }\n        }\n\n        //Alpha\n        if (this.useAlpha) {\n            if (this.useFadeIn) {\n                if (t < this.fadeInDuration) {\n                    component.alpha = this.fadeInEase(t, 0, this.alphaStart, this.fadeInDuration);\n                } else {\n                    component.alpha = this.alphaEase(t - this.fadeInDuration, this.alphaStart, this.alphaDelta, this.alphaDuration);\n                }\n            } else {\n                if (this.alphaEase) {\n                    component.alpha = this.alphaEase(t, this.alphaStart, this.alphaDelta, duration)\n                } else {\n                    component.alpha = (this.alphaDelta) * mod + this.alphaStart;\n                }\n            }\n        }\n\n        //Rotation\n        if (this.useRotation) {\n            component.rotation += this.rotationSpeed;\n        }\n\n        //Scale\n        if (this.useScale) {\n            if (this.uniformScale) {\n                if (this.useScaleIn) {\n                    if (t < this.scaleInDuration) {\n                        component.scale.x = component.scale.y = this.scaleInEase(t, 0, this.scaleStart, this.scaleInDuration);\n                    } else {\n                        component.scale.x = component.scale.y = this.scaleEase(t - this.scaleInDuration, this.scaleStart, this.scaleDelta, this.scaleDuration);\n                    }\n                } else {\n                    if (this.scaleEase) {\n                        component.scale.x = this.scaleEase(t, this.scaleStart, this.scaleDelta, duration);\n                        component.scale.y = this.scaleEase(t, this.scaleStart, this.scaleDelta, duration)\n                    } else {\n                        component.scale.x = component.scale.y = this.scaleDelta * mod + this.scaleStart;\n                    }\n                }\n            } else {\n                if (this.useScaleIn) {\n                    if (t < this.scaleInDuration) {\n                        component.scale.x = this.scaleInEase(t, 0, this.scaleXStart, this.scaleInDuration);\n                        component.scale.y = this.scaleInEase(t, 0, this.scaleYStart, this.scaleInDuration);\n                    } else {\n                        component.scale.x = this.scaleEase(t - this.scaleInDuration, this.scaleXStart, this.scaleXDelta, this.scaleDuration);\n                        component.scale.y = this.scaleEase(t - this.scaleInDuration, this.scaleYStart, this.scaleYDelta, this.scaleDuration);\n                    }\n                } else {\n                    if (this.scaleXEase) {\n                        component.scale.x = this.scaleXEase(t, this.scaleXStart, this.scaleXDelta, duration);\n                    } else {\n                        component.scale.x = this.scaleXDelta * mod + this.scaleXStart;\n                    }\n                    if (this.scaleYEase) {\n                        component.scale.y = this.scaleYEase(t, this.scaleYStart, this.scaleYDelta, duration);\n                    } else {\n                        component.scale.y = this.scaleYDelta * mod + this.scaleYStart;\n                    }\n                }\n            }\n\n\n        }\n\n        //Tint\n        if (this.useTint) {\n            component.tint = this._color.tween(this.tintEase, t, duration);\n        }\n\n        //Spawn t = 0.5\n        if (this._spawnOnHalfway) {\n            if (t >= 0.5) {\n                this._spawnOnHalfway = false;\n                this.emitter.__subSpawn(this, this.settings.spawn.onHalfway);\n            }\n        }\n\n        if (this.useChilds && this._hasChildEmitters) {\n            const childs = this._childEmitters;\n            let l = childs.length;\n            while (--l > -1) {\n                const child = childs[l];\n                if (child.__recycled) continue;\n                child.x = component.position.x;\n                child.y = component.position.y;\n                if (child.__adoptRotation) {\n                    child.rotation = component.rotation;\n                }\n            }\n        }\n\n        if (this.emitter.__on.particleUpdated.__hasCallback) {\n            this.emitter.__on.particleUpdated.dispatch(this);\n        }\n        if (this.__on.updated.__hasCallback) {\n            this.__on.updated.dispatch(this);\n        }\n    }\n\n    public stop() {\n        this.time = this.duration;\n    }\n\n    public recycle() {\n\n        if (this.emitter.__on.particleDied.__hasCallback) {\n            this.emitter.__on.particleDied.dispatch(this);\n        }\n\n        const on = this.__on;\n        if (on.died.__hasCallback) {\n            on.died.dispatch(this);\n            on.died.removeAll();\n        }\n        if (on.updated.__hasCallback) {\n            on.updated.removeAll();\n        }\n        if (on.bounced.__hasCallback) {\n            on.bounced.removeAll();\n        }\n\n        if (this._hasChildEmitters) {\n            const childs = this._childEmitters;\n            let l = childs.length;\n            while (--l > -1) {\n                childs[l].stop(true);\n            }\n            this._childEmitters.length = 0;\n            this._hasChildEmitters = false;\n        }\n\n\n        this.component.recycle();\n        this.__fx.__recycleParticle(this);\n        this.dx = this.dy = this.deltaX = this.deltaY = 0;\n\n        this.component = null;\n        this.emitter = null;\n        this.settings = null;\n\n        this.__recycled = true;\n\n    }\n\n    public dispose() {\n        this.recycle();\n        this.__fx = null;\n    }\n\n    public get x(): number {\n        return this.component.x;\n    }\n\n    public get y(): number {\n        return this.component.y;\n    }\n\n    public get on(): IParticleSignals {\n        return this.__on;\n    }\n\n\n    // *********************************************************************************************\n    // * Internal\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                                        \t\t\t\t   *\n    // *********************************************************************************************\n\n    public __removeChildEmitter(emitter: ParticleEmitter) {\n        const index = this._childEmitters.indexOf(emitter);\n        if (index > -1) {\n            this._childEmitters.splice(index, 1);\n            if (this._childEmitters.length == 0) this._hasChildEmitters = false;\n        }\n    }\n\n}\n","import {FX} from \"./FX\";\n\nexport class Sanitizer {\n\n    public static sanitizeBundle(bundle: any) {\n\n        for (let emitter of bundle.emitters) {\n            const structure = Sanitizer._presetStructure.emitter;\n            Sanitizer.parse(emitter, structure,  Sanitizer._presetStructure.emitterSpawn);\n        }\n\n        for (let sequence of bundle.sequences) {\n            const structure = Sanitizer._presetStructure.sequence;\n            Sanitizer.parse(sequence, structure,  Sanitizer._presetStructure.sequenceEffect);\n        }\n    }\n\n    private static parse(bundleObject: any, structureObject: any, spawnStructureObject:any) {\n        for (let propName in structureObject) {\n            if (bundleObject[propName] == null) {\n                bundleObject[propName] = structureObject[propName];\n            } else {\n                const bundleProp = bundleObject[propName];\n\n                if (typeof bundleProp !== 'object') continue;\n\n                const structureProp = structureObject[propName];\n                if (!bundleProp.hasOwnProperty('length')) {\n                    Sanitizer.parse(bundleProp, structureProp, spawnStructureObject);\n                } else {\n                    for (let spawn of bundleProp) {\n                        for (let spawnPropName in spawnStructureObject) {\n                            if (spawn[spawnPropName] == null) {\n                                spawn[spawnPropName] = spawnStructureObject[spawnPropName];\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    private static _presetStructure: any = {\n        sequence: {\n            id: 0,\n            name: '',\n            type: 1,\n            delay: 0,\n            scaleMin: 1,\n            scaleMax: 1,\n            effects: []\n        },\n        sequenceEffect: {\n            id: 0,\n            componentId: null,\n            componentType: 0,\n            delay: 0,\n            componentParams: {\n                animationSpeedMin: 1,\n                animationSpeedMax: 1,\n                anchorX: 0.5,\n                anchorY: 0.5,\n                loop: false\n            },\n            scaleMin: 1,\n            scaleMax: 1,\n            alphaMin: 1,\n            alphaMax: 1,\n            rotationMin: 0,\n            rotationMax: 0,\n            blendMode: 0,\n            duration: 0.1,\n            tint: 0xffffff,\n            containerId: '',\n            triggerValue: ''\n        },\n        emitter: {\n            id: 0,\n            name: '',\n            type: 0,\n            core: {\n                type: 'circle',\n                params: {\n                    radius: 100,\n                    radial: true,\n                    angle: 6.28318530718,\n                    uniform: false,\n                    width: 100,\n                    height: 100\n                }\n            },\n            spawnFrequencyMin: 0.1,\n            spawnFrequencyMax: 0.1,\n            maxParticles: 1000,\n            spawnCountMin: 1,\n            spawnCountMax: 1,\n            duration: 0,\n            infinite: true,\n            useGravity: false,\n            gravity: 0,\n            useFloor: false,\n            floorY: 700,\n            rotation: 0,\n            autoRotation: 0,\n            particleSettings: {\n                componentType: 0,\n                componentId: '',\n                componentParams: {\n                    animationSpeedMin: 1,\n                    animationSpeedMax: 1,\n                    anchorX: 0.5,\n                    anchorY: 0.5,\n                    loop: false\n                },\n                durationMin: 1,\n                durationMax: 2,\n                distanceMin: 0,\n                distanceMax: 0,\n                distanceEase: 'linear',\n                moveSpeedMin: 0,\n                moveSpeedMax: 0,\n                bounceFacMin: 0,\n                bounceFacMax: 0,\n                frictionMin: 0,\n                frictionMax: 0,\n                useMotion: false,\n                useRotation: false,\n                useAlpha: false,\n                useScale: false,\n                useTint: false,\n                useChilds: false,\n                useSpawns: false,\n                stopOnBounce: false,\n                align: false,\n                blendMode: 1,\n                addOnTop: true,\n                rotationSpeedMin: 0,\n                rotationSpeedMax: 0,\n                randomRotationDirection: false,\n                randomStartRotation: false,\n                fadeIn: true,\n                fadeInDurationFac: 0.1,\n                fadeInEase: 'linear',\n                alphaStartMin: 0.7,\n                alphaStartMax: 0.9,\n                alphaEndMin: 0.7,\n                alphaEndMax: 0.8,\n                alphaEase: 'linear',\n                tintStart: 0xffffff,\n                tintEnd: 0xffffff,\n                tintEase: 'linear',\n                scaleIn: false,\n                scaleInDurationFac: 0.2,\n                scaleInEase: 'linear',\n                uniformScale: true,\n                scaleXStartMin: 1,\n                scaleXStartMax: 1,\n                scaleXEndMin: 1,\n                scaleXEndMax: 1,\n                scaleXEase: 'linear',\n                scaleYStartMin: 1,\n                scaleYStartMax: 1,\n                scaleYEndMin: 1,\n                scaleYEndMax: 1,\n                scaleYEase: 'linear',\n                scaleStartMin: 1,\n                scaleStartMax: 1,\n                scaleEndMin: 1,\n                scaleEndMax: 1,\n                scaleEase: 'linear',\n                childs: [],\n                spawn: {\n                    onComplete: [],\n                    onBounce: [],\n                    onHalfway: [],\n                    onStart: []\n                }\n            },\n            childs: []\n        },\n        emitterSpawn: {\n            type: 0,\n            id: 0,\n            scale: 1,\n            adoptRotation: true,\n            containerId: ''\n        }\n    };\n}","/// <reference types=\"pixi.js\" />\n\nimport { FX } from \"./FX\";\nimport * as PIXI from 'pixi.js';\n\nexport class Sprite extends PIXI.Sprite {\n\n    public __sequenceEndTime: number;\n    public __fx: FX;\n\n    constructor(public componentId: string, texture: string, anchorX?: number, anchorY?: number) {\n        super(PIXI.Texture.from(texture));\n        this.anchor.set(anchorX || 0.5, anchorY || 0.5);\n        this.__sequenceEndTime = null;\n    }\n\n    // *********************************************************************************************\n    // * Public\t\t\t\t\t\t\t\t\t\t                                        \t\t\t\t\t\t\t\t\t\t\t   *\n    // *********************************************************************************************\n    public recycle() {\n        this.tint = 0xffffff;\n        this.alpha = 1;\n        this.rotation = 0;\n        this.scale.set(1);\n        if (this.parent) this.parent.removeChild(this);\n        this.__fx.__recycleSprite(this.componentId, this);\n    }\n\n    public dispose() {\n        this.__fx = null;\n        this.recycle();\n        // @ts-ignore\n        this.destroy(false);\n    }\n\n    // *********************************************************************************************\n    // * Private\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                                        \t\t   *\n    // *********************************************************************************************\n\n    // *********************************************************************************************\n    // * Events\t\t\t                                        \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   *\n    // *********************************************************************************************\n\n}\n","import { Particle } from \"../Particle\";\nimport { IBoxCoreParams, ICircleCoreParams, IRingCoreParams } from \"../FX\";\nimport { ParticleEmitter } from \"../ParticleEmitter\";\n\nexport class BaseEmitterCore {\n\n    public x: number;\n    public y: number;\n    public emitter: ParticleEmitter;\n\n    protected _settings: ICircleCoreParams | IBoxCoreParams | IRingCoreParams;\n    protected _posInterpolationStep: number;\n    protected _dx: number = 0;\n    protected _dy: number = 0;\n    protected _rotation: number = 0;\n    protected _t: number;\n\n    public __x: number;\n    public __y: number;\n    public __scaleMod: number;\n\n    public static __TYPE_BOX: string = 'box';\n    public static __TYPE_CIRCLE: string = 'circle';\n    public static __TYPE_RING: string = 'ring';\n\n\n    constructor(public type: string) {\n\n    }\n\n    // *********************************************************************************************\n    // * Public\t\t\t                                        \t\t\t\t\t\t\t\t   *\n    // *********************************************************************************************\n    public init(emitter: ParticleEmitter) {\n        this.emitter = emitter;\n        this._settings = emitter.settings.core.params;\n        this.x = this.__x = emitter.x;\n        this.y = this.__y = emitter.y;\n        this.rotation = emitter.rotation;\n    }\n\n    public emit(particle: Particle) {\n\n    }\n\n    public prepare(spawnCount: number) {\n        this._posInterpolationStep = 1 / spawnCount;\n        this._t = this._posInterpolationStep * 0.5;\n    }\n\n    public step() {\n        this.__x = this.x;\n        this.__y = this.y;\n    }\n\n    public recycle() {\n        this.emitter = null;\n        this._settings = null;\n\n    }\n\n    public dispose() {\n        this.recycle();\n        this.emitter = null;\n        this._settings = null;\n    }\n\n    public get rotation(): number {\n        return this._rotation;\n    }\n\n    public set rotation(value: number) {\n        this._rotation = value;\n        this._dx = Math.cos(value);\n        this._dy = Math.sin(value);\n    }\n\n    // *********************************************************************************************\n    // * Private\t\t\t\t\t\t\t\t                                        \t\t\t\t\t\t\t\t\t\t\t\t   *\n    // *********************************************************************************************\n\n    // *********************************************************************************************\n    // * Events\t\t\t\t\t\t\t\t                                        \t\t\t\t\t\t\t\t\t\t\t\t\t   *\n    // *********************************************************************************************\n\n}\n","/// <reference types=\"pixi.js\" />\n\nimport * as PIXI from \"pixi.js\";\nimport { IBoxCoreParams } from \"../FX\";\nimport { Particle } from \"../Particle\";\nimport { ParticleEmitter } from \"../ParticleEmitter\";\nimport { BaseEmitterCore } from \"./BaseEmitterCore\";\nimport { Rnd } from \"../util/Rnd\";\n\n\nexport class BoxEmitterCore extends BaseEmitterCore {\n\n    constructor() {\n        super(BaseEmitterCore.__TYPE_BOX);\n    }\n\n    // *********************************************************************************************\n    // * Public\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   *\n    // *********************************************************************************************\n\n    public emit(particle: Particle) {\n\n        const settings = <IBoxCoreParams>this._settings;\n        const emitter = this.emitter;\n\n        const w2 = settings.width * 0.5 * this.__scaleMod;\n        const h2 = settings.height * 0.5 * this.__scaleMod;\n\n        let angle = emitter.rotation;\n\n        const x = Rnd.float(-w2, w2);\n        const y = Rnd.float(-h2, h2);\n\n        if (angle != 0) {\n            particle.component.x = (this.__x + this._t * (this.x - this.__x)) + x * Math.cos(angle) - y * Math.sin(angle);\n            particle.component.y = (this.__y + this._t * (this.y - this.__y)) + x * Math.sin(angle) + y * Math.cos(angle);\n        } else {\n            particle.component.x = this.__x + this._t * (this.x - this.__x) + x;\n            particle.component.y = this.__y + this._t * (this.y - this.__y) + y;\n        }\n\n        if (settings.radial) {\n            angle += Math.atan2(y, x);\n            particle.dx = Math.cos(angle);\n            particle.dy = Math.sin(angle);\n        } else {\n            particle.dx = this._dx;\n            particle.dy = this._dy;\n        }\n\n        particle.component.rotation = angle;\n\n        this._t += this._posInterpolationStep;\n\n    }\n\n    // *********************************************************************************************\n    // * Private\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                                        \t\t   *\n    // *********************************************************************************************\n\n    // *********************************************************************************************\n    // * Events\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                                        \t\t\t\t\t   *\n    // *********************************************************************************************\n\n\n}\n","/// <reference types=\"pixi.js\" />\n\nimport * as PIXI from \"pixi.js\";\nimport { ICircleCoreParams, FX } from \"../FX\";\nimport { Particle } from \"../Particle\";\nimport { ParticleEmitter } from \"../ParticleEmitter\";\nimport { BaseEmitterCore } from \"./BaseEmitterCore\";\nimport { Rnd } from \"../util/Rnd\";\n\nexport class CircleEmitterCore extends BaseEmitterCore {\n\n    constructor() {\n        super(BaseEmitterCore.__TYPE_CIRCLE);\n    }\n\n    // *********************************************************************************************\n    // * Public\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                   *\n    // *********************************************************************************************\n\n    public emit(particle: Particle) {\n\n        const settings = <ICircleCoreParams>this._settings;\n        const emitter = this.emitter;\n\n        let angle;\n        if (!settings.angle) {\n            angle = Rnd.float(0, 6.28319) + emitter.rotation;\n        } else {\n            angle = Rnd.float(-settings.angle * 0.5, settings.angle * 0.5) + emitter.rotation;\n        }\n\n        if (settings.radius > 0) {\n            let r = Rnd.float(0, settings.radius) * this.__scaleMod;\n            particle.component.x = (this.__x + this._t * (this.x - this.__x)) + Math.cos(angle) * r;\n            particle.component.y = (this.__y + this._t * (this.y - this.__y)) + Math.sin(angle) * r;\n        } else {\n            particle.component.x = this.__x + this._t * (this.x - this.__x);\n            particle.component.y = this.__y + this._t * (this.y - this.__y);\n        }\n\n        if (settings.radial) {\n            particle.dx = Math.cos(angle);\n            particle.dy = Math.sin(angle);\n            particle.component.rotation = angle;\n        } else {\n            particle.dx = this._dx;\n            particle.dy = this._dy;\n            particle.component.rotation = emitter.rotation;\n        }\n\n        this._t += this._posInterpolationStep;\n\n    }\n\n\n    // *********************************************************************************************\n    // * Private\t\t\t\t\t\t\t\t\t                                        \t   *\n    // *********************************************************************************************\n\n    // *********************************************************************************************\n    // * Events\t\t\t\t\t\t\t                                        \t\t\t\t   *\n    // *********************************************************************************************\n\n}\n","/// <reference types=\"pixi.js\" />\n\nimport * as PIXI from \"pixi.js\";\nimport { BaseEmitterCore } from \"./BaseEmitterCore\";\nimport { ParticleEmitter } from \"../ParticleEmitter\";\nimport { Particle } from \"../Particle\";\nimport { IRingCoreParams } from \"../FX\";\nimport { Rnd } from \"../util/Rnd\";\n\nexport class RingEmitterCore extends BaseEmitterCore {\n\n    private _uniformStep: number;\n    private _angle: number;\n\n    constructor() {\n        super(BaseEmitterCore.__TYPE_RING);\n    }\n\n    // *********************************************************************************************\n    // * Public\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t               *\n    // *********************************************************************************************\n\n\n    public prepare(spawnCount: number) {\n        super.prepare(spawnCount);\n\n        const angle = (<IRingCoreParams>this._settings).angle;\n        if (2 * Math.PI - angle < 0.1) {\n            this._uniformStep = angle / (spawnCount);\n            this._angle = angle;\n        } else {\n            this._uniformStep = angle / (spawnCount - 1);\n            this._angle = -angle * 0.5;\n        }\n    }\n\n    public emit(particle: Particle) {\n\n        const settings = <IRingCoreParams>this._settings;\n        const emitter = this.emitter;\n\n        let angle;\n\n        if (settings.uniform) {\n            angle = this._angle + emitter.rotation;\n            this._angle += this._uniformStep;\n        } else {\n            angle = Rnd.float(-settings.angle * 0.5, settings.angle * 0.5) + emitter.rotation;\n        }\n\n        const r = settings.radius * this.__scaleMod;\n        particle.component.x = (this.__x + this._t * (this.x - this.__x)) + Math.cos(angle) * r;\n        particle.component.y = (this.__y + this._t * (this.y - this.__y)) + Math.sin(angle) * r;\n\n        if (settings.radial) {\n            particle.dx = Math.cos(angle);\n            particle.dy = Math.sin(angle);\n            particle.component.rotation = angle;\n        } else {\n            particle.dx = this._dx;\n            particle.dy = this._dy;\n            particle.component.rotation = emitter.rotation;\n        }\n\n        this._t += this._posInterpolationStep;\n\n    }\n\n    // *********************************************************************************************\n    // * Private\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t               *\n    // *********************************************************************************************\n\n    // *********************************************************************************************\n    // * Events\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                           *\n    // *********************************************************************************************\n\n}\n","/// <reference types=\"pixi.js\" />\n\nimport * as PIXI from \"pixi.js\";\nimport { BaseEffect } from \"./BaseEffect\";\nimport { ComponentType } from \"./ComponentType\";\nimport { EffectSequence } from \"./EffectSequence\";\nimport { EffectSequenceComponentType } from \"./EffectSequenceComponentType\";\nimport { MovieClip } from \"./MovieClip\";\nimport { Particle } from \"./Particle\";\nimport { ParticleEmitter } from \"./ParticleEmitter\";\nimport { Sanitizer } from \"./Sanitizer\";\nimport { Sprite } from \"./Sprite\";\nimport { BaseEmitterCore } from \"./core/BaseEmitterCore\";\nimport { BoxEmitterCore } from \"./core/BoxEmitterCore\";\nimport { CircleEmitterCore } from \"./core/CircleEmitterCore\";\nimport { RingEmitterCore } from \"./core/RingEmitterCore\";\nimport { LinkedList } from \"./util/LinkedList\";\n\nexport class FX {\n\n    public static settingsVersion: number = 0;\n    public static readonly version: string = '1.3.3';\n    private static _bundleHash: string = '80c6df7fb0d3d898f34ce0031c037fef';\n\n    public useBlendModes: boolean = true;\n    public particleCount: number = 0;\n    public emitterCount: number = 0;\n    public effectSequenceCount: number = 0;\n    public maxParticles: number = 5000;\n    public particleFac: number = 1;\n\n\n    private _active: boolean = false;\n    private _timeElapsed: number;\n\n    private _cache: any;\n    private _settingsCache: any;\n    private _nameMaps: any;\n\n    private _effects: LinkedList = new LinkedList();\n\n    public __containers: { [key: string]: PIXI.Container } = {};\n\n    public static ComponentType: any = ComponentType;\n    public static EffectSequenceComponentType: any = EffectSequenceComponentType;\n\n    public static __emitterCores: any = {\n        circle: CircleEmitterCore,\n        box: BoxEmitterCore,\n        ring: RingEmitterCore\n    };\n\n    constructor() {\n        this.clearCache();\n        this.start();\n    }\n\n    // *********************************************************************************************\n    // * Public\t\t\t\t\t\t\t\t\t\t                                        \t   *\n    // *********************************************************************************************\n\n    /**\n     * Starts the process.\n     *\n     * @param {} - No parameters.\n     * @return {} - No return value.\n     */\n    public start() {\n        this._active = true;\n        this._timeElapsed = Date.now();\n    }\n\n    /**\n     * Pauses the execution of the function.\n     *\n     * @param {} \n     * @return {} \n     */\n    public pause() {\n        this._active = false;\n    }\n\n    /**\n     * Updates the state of the object based on the elapsed time.\n     *\n     * @param {number} delta - The time delta to update by. Default is 1.\n     */\n    public update(delta: number = 1) {\n        if (!this.active) return;\n\n        const t = Date.now();\n        let dt = (t - this._timeElapsed) * 0.001;\n\n        dt *= delta;\n\n        const list = this._effects;\n        let node = <BaseEffect>list.first;\n        let next: BaseEffect;\n        while (node) {\n            next = <BaseEffect>node.next;\n            node.update(dt);\n            node = next;\n        }\n        this._timeElapsed = t;\n    }\n\n    /**\n     * Clears the cache by resetting all cache objects to empty values.\n     *\n     * @param {} \n     * @return {} \n     */\n    public clearCache() {\n        this._cache = {\n            particles: [],\n            mcs: [],\n            sprites: [],\n            effectSequences: [],\n            emitters: [],\n            cores: {}\n        };\n        this._settingsCache = {\n            mcs: {},\n            sprites: {},\n            emitters: {},\n            effectSequences: {}\n        };\n        this._nameMaps = {\n            emitters: {},\n            effectSequences: {}\n        };\n    }\n\n    /**\n     * Sets the value of the floorY property for all emitters in the settings cache.\n     *\n     * @param {number} value - The new value for the floorY property.\n     */\n    public setFloorY(value: number) {\n        const s = this._settingsCache.emitters;\n        for (let n in s) {\n            s[n].floorY = value;\n        }\n    }\n\n    /**\n     * Disposes of all the effects in the list and clears the cache.\n     */\n    public dispose() {\n        let list = this._effects;\n        let node = <BaseEffect>list.first;\n        while (node) {\n            node.dispose();\n            node = <BaseEffect>node.next;\n        }\n        list.clear();\n        this.clearCache();\n    }\n\n    /**\n     * Loads the bundle files and returns a promise that resolves to the parsed sprite sheet result.\n     *\n     * @param {string} bundleSettingsUrl - The URL of the bundle settings.\n     * @param {string} spritesheetUrl - The URL of the sprite sheet.\n     * @param {string} spritesheetFilter - The filter for the sprite sheet. Default is an empty string.\n     * @param {string[]} additionalAssets - An array of additional asset URLs. Default is an empty array.\n     * @return {Promise<IParseSpriteSheetResult>} A promise that resolves to the parsed sprite sheet result.\n     */\n    public loadBundleFiles(bundleSettingsUrl: string, spritesheetUrl: string, spritesheetFilter: string = '', additionalAssets: string[] = []): Promise<IParseSpriteSheetResult> {\n        return new Promise(async (resolve, reject) => {\n\n            const data: Record<string, string> =\n            {\n                'rfx_spritesheet': spritesheetUrl,\n                'rfx_bundleSettings': bundleSettingsUrl,\n            };\n\n            for (var i in additionalAssets) {\n                data[i] = additionalAssets[i];\n            }\n\n            PIXI.Assets.addBundle('rfx_assets', data);\n            const assets = await PIXI.Assets.loadBundle('rfx_assets');\n\n            resolve(this.initBundle(assets.rfx_bundleSettings));\n\n        });\n    }\n\n    /**\n     * Initializes the bundle with the given settings and optionally clears the cache.\n     *\n     * @param {any} bundleSettings - The settings for the bundle.\n     * @param {boolean} clearCache - Whether to clear the cache or not. Optional, default is false.\n     * @returns {IParseSpriteSheetResult} The result of parsing the sprite sheet.\n     */\n    public initBundle(bundleSettings: any, clearCache?: boolean): IParseSpriteSheetResult {\n        if (bundleSettings.__h !== FX._bundleHash) {\n            throw new Error('Invalid settings file.');\n        }\n\n        if (bundleSettings.__v != FX.settingsVersion) {\n            throw new Error('Settings version mismatch.');\n        }\n\n        Sanitizer.sanitizeBundle(bundleSettings);\n\n        if (clearCache) {\n            this.clearCache();\n        }\n        for (let n in bundleSettings.emitters) {\n            const preset = bundleSettings.emitters[n];\n            this.addParticleEmitter(preset.id, preset);\n        }\n        for (let n in bundleSettings.sequences) {\n            const preset = bundleSettings.sequences[n];\n            this.addEffectSequence(preset.id, preset);\n        }\n\n        this.useBlendModes = bundleSettings.useBlendModes;\n        this.maxParticles = bundleSettings.maxParticles;\n\n        return this.parseTextureCache(bundleSettings.spritesheetFilter);\n    }\n\n    /**\n     * Adds a particle emitter to the FX object.\n     *\n     * @param {string} componentId - The unique identifier for the emitter component.\n     * @param {IEmitterSettings} settings - The settings for the emitter.\n     * @throws {Error} Throws an error if the componentId already exists.\n     * @return {FX} Returns the FX object for chaining.\n     */\n    public addParticleEmitter(componentId: string, settings: IEmitterSettings): FX {\n\n        if (this._settingsCache.emitters[componentId]) throw new Error(`ComponentId '${componentId}' already exists.`);\n        this._settingsCache.emitters[componentId] = settings;\n        this._nameMaps.emitters[settings.name] = settings;\n        return this;\n    }\n\n    /**\n     * Adds an effect sequence to the component with the specified ID.\n     *\n     * @param {string} componentId - The ID of the component.\n     * @param {IEffectSequenceSettings} settings - The settings for the effect sequence.\n     * @throws {Error} If a component with the same ID already exists.\n     * @return {FX} The current instance of the FX class.\n     */\n    public addEffectSequence(componentId: string, settings: IEffectSequenceSettings): FX {\n        if (this._settingsCache.effectSequences[componentId]) throw new Error(`ComponentId '${componentId}' already exists.`);\n        this._settingsCache.effectSequences[componentId] = settings;\n        this._nameMaps.effectSequences[settings.name] = settings;\n        return this;\n    }\n\n    /**\n     * Initializes a sprite with the specified component ID and settings.\n     *\n     * @param {string} componentId - The ID of the component.\n     * @param {ISpriteSettings} settings - The settings for the sprite.\n     * @throws {Error} Throws an error if the component ID already exists.\n     * @returns {FX} Returns the current instance of the FX class.\n     */\n    public initSprite(componentId: string, settings: ISpriteSettings): FX {\n        if (this._settingsCache.sprites[componentId]) throw new Error(`ComponentId '${componentId}' already exists.`);\n        this._settingsCache.sprites[componentId] = settings;\n        return this;\n    }\n\n    /**\n     * Initializes a movie clip with the specified component ID and settings.\n     *\n     * @param {string} componentId - The unique identifier for the movie clip component.\n     * @param {IMovieClipSettings} settings - The settings for the movie clip.\n     * @return {FX} The instance of the FX class.\n     */\n    public initMovieClip(componentId: string, settings: IMovieClipSettings): FX {\n        if (this._settingsCache.mcs[componentId]) throw new Error(`ComponentId '${componentId}' already exists.`);\n        this._settingsCache.mcs[componentId] = settings;\n        return this;\n    }\n\n    /**\n     * Retrieves the movie clips from the settings cache.\n     *\n     * @return {Object} An object containing movie clip settings.\n     */\n    public getMovieClips(): { [key: string]: IMovieClipSettings } {\n        return this._settingsCache.mcs;\n    }\n\n    /**\n     * Retrieves the sprites from the settings cache.\n     *\n     * @return {Object} An object containing sprite settings.\n     */\n    public getSprites(): { [key: string]: ISpriteSettings } {\n        return this._settingsCache.sprites;\n    }\n\n    /**\n     * Adds a container to the __containers object with the specified key.\n     *\n     * @param {string} key - The key used to identify the container in the __containers object.\n     * @param {PIXI.Container} container - The container to be added.\n     */\n    public addContainer(key: string, container: PIXI.Container) {\n        this.__containers[key] = container;\n    }\n\n    /**\n     * Retrieves the EffectSequence object with the specified name.\n     *\n     * @param {string} name - The name of the EffectSequence to retrieve.\n     * @return {EffectSequence} - The EffectSequence object with the specified name.\n     */\n    public getEffectSequence(name: string): EffectSequence {\n        const settings = this._nameMaps.effectSequences[name];\n        if (!settings) throw new Error(`Settings not defined for '${name}'`);\n        return this.getEffectSequenceById(settings.id);\n    }\n\n    /**\n     * Retrieves an EffectSequence object by its component ID.\n     *\n     * @param {string} componentId - The ID of the component.\n     * @return {EffectSequence} The retrieved EffectSequence object.\n     */\n    public getEffectSequenceById(componentId: string): EffectSequence {\n        const pool = this._cache.effectSequences;\n        let effectSequence;\n\n        let settings = <IEffectSequenceSettings>this._settingsCache.effectSequences[componentId];\n        if (!settings) throw new Error(`Settings not defined for '${componentId}'`);\n\n        if (pool.length == 0) {\n            effectSequence = new EffectSequence(componentId);\n            effectSequence.__fx = this;\n        } else {\n            effectSequence = pool.pop();\n        }\n        effectSequence.__applySettings(settings);\n        return effectSequence;\n    }\n\n    /**\n     * Retrieves a particle emitter by its name.\n     *\n     * @param {string} name - The name of the particle emitter.\n     * @param {boolean} autoRecycleOnComplete - (Optional) Specifies whether the emitter should auto recycle when complete. Default is true.\n     * @param {boolean} cloneSettings - (Optional) Specifies whether the emitter settings should be cloned. Default is false.\n     * @return {ParticleEmitter} The particle emitter with the specified name.\n     */\n    public getParticleEmitter(name: string, autoRecycleOnComplete: boolean = true, cloneSettings: boolean = false): ParticleEmitter {\n        const settings = this._nameMaps.emitters[name];\n        if (!settings) throw new Error(`Settings not defined for '${name}'`);\n        return this.getParticleEmitterById(settings.id, autoRecycleOnComplete, cloneSettings);\n    }\n\n    /**\n     * Retrieves a particle emitter by its component ID.\n     *\n     * @param {string} componentId - The ID of the component.\n     * @param {boolean} autoRecycleOnComplete - Whether the emitter should automatically recycle itself when it completes.\n     * @param {boolean} cloneSettings - Whether to clone the settings object before applying them to the emitter.\n     * @return {ParticleEmitter} The retrieved particle emitter.\n     */\n    public getParticleEmitterById(componentId: string, autoRecycleOnComplete: boolean = true, cloneSettings: boolean = false): ParticleEmitter {\n        const pool = this._cache.emitters;\n        let emitter;\n\n        let settings = <IParticleSettings>this._settingsCache.emitters[componentId];\n        if (!settings) throw new Error(`Settings not defined for '${componentId}'`);\n\n        if (pool.length == 0) {\n            emitter = new ParticleEmitter(componentId);\n            emitter.__fx = this;\n        } else {\n            emitter = pool.pop();\n        }\n\n        if (cloneSettings) {\n            settings = JSON.parse(JSON.stringify(settings));\n        }\n        emitter.autoRecycleOnComplete = autoRecycleOnComplete;\n        emitter.__applySettings(settings);\n        return emitter;\n    }\n\n    /**\n     * Stops the specified particle emitter.\n     *\n     * @param {ParticleEmitter} emitter - The particle emitter to stop.\n     * @param {boolean} [dispose=false] - Whether to dispose the emitter or recycle it.\n     */\n    public stopEmitter(emitter: ParticleEmitter, dispose: boolean = false) {\n        if (emitter.list === this._effects) {\n            this._effects.remove(emitter);\n        }\n        if (dispose) {\n            emitter.dispose();\n        } else {\n            this.__recycleEmitter(emitter);\n        }\n    }\n\n    /**\n     * Stops all effects.\n     *\n     * @param {none} none - This function does not take any parameters.\n     * @return {void} This function does not return a value.\n     */\n    public stopAllEffects() {\n        const list = this._effects.toArray();\n        for (let node of list) {\n            (<BaseEffect>node).recycle();\n        }\n    }\n\n    /**\n     * Parses a sprite sheet.\n     *\n     * @param {PIXI.Spritesheet} spriteSheet - The sprite sheet to parse.\n     * @param {string} filter - Optional filter to apply to the sprite sheet.\n     * @return {IParseSpriteSheetResult} The result of parsing the sprite sheet.\n     */\n    public parseSpriteSheet(spriteSheet: PIXI.Spritesheet, filter?: string): IParseSpriteSheetResult {\n        return this.parseObject(spriteSheet.data.frames, filter);\n    }\n\n    /**\n     * Parses the texture cache and returns the result as an IParseSpriteSheetResult object.\n     *\n     * @param {string} [filter] - An optional parameter to filter the results.\n     * @returns {IParseSpriteSheetResult} - The parsed sprite sheet result.\n     */\n    public parseTextureCache(filter?: string): IParseSpriteSheetResult {\n        return this.parseObject(PIXI['Cache']['_cache'], filter);\n    }\n\n    /**\n     * Returns if the FX instance is active.\n     *\n     * @return {boolean} The value of the 'active' property.\n     */\n    public get active(): boolean {\n        return this._active;\n    }\n\n    // *********************************************************************************************\n    // * Internal\t\t\t\t\t\t\t\t\t\t\t\t\t                                        \t\t\t\t\t\t\t   *\n    // *********************************************************************************************\n\n    public __addActiveEffect(effect: BaseEffect) {\n        this._effects.add(effect);\n    }\n\n    public __removeActiveEffect(effect: BaseEffect) {\n        this._effects.remove(effect);\n    }\n\n\n    public __getSprite(componentId: string): Sprite {\n        const cache = this._cache.sprites;\n        let pool = cache[componentId];\n\n        if (cache[componentId] == null) {\n            pool = cache[componentId] = [];\n        }\n\n        if (pool.length == 0) {\n            const settings = <ISpriteSettings>this._settingsCache.sprites[componentId];\n            if (settings == null) throw new Error(`Settings not defined for '${componentId}'`);\n            const sprite = new Sprite(componentId, settings.texture, settings.anchorX, settings.anchorY);\n            sprite.__fx = this;\n            return sprite;\n        }\n        return pool.pop();\n    }\n\n    public __getMovieClip(componentId: string): MovieClip {\n        const cache = this._cache.mcs;\n        let pool = cache[componentId];\n\n        if (cache[componentId] == null) {\n            pool = cache[componentId] = [];\n        }\n\n        if (pool.length == 0) {\n            let settings = <IMovieClipSettings>this._settingsCache.mcs[componentId];\n            if (settings == null) throw new Error(`Settings not defined for '${componentId}'`);\n            const mc = new MovieClip(componentId, settings.textures, settings.anchorX, settings.anchorY);\n            mc.__fx = this;\n            return mc;\n        }\n        return pool.pop();\n    }\n\n    public __getParticle(): Particle {\n        let cache = this._cache,\n            pool = cache.particles;\n\n        if (pool.length == 0) {\n            const particle = new Particle();\n            particle.__fx = this;\n            return particle;\n        }\n        return pool.pop();\n    }\n\n    public __getEmitterCore(type: string, emitter: ParticleEmitter): BaseEmitterCore {\n        let cache = this._cache.cores;\n        let pool = cache[type];\n\n        if (pool == null) {\n            pool = cache[type] = [];\n        }\n\n        if (pool.length == 0) {\n            return new FX.__emitterCores[type](type);\n\n        }\n        return pool.pop();\n    }\n\n    public __recycleParticle(particle: Particle) {\n        this._cache.particles.push(particle);\n    }\n\n    public __recycleSprite(componentId: string, object: any) {\n        this._cache.sprites[componentId].push(object);\n    }\n\n    public __recycleMovieClip(componentId: string, object: any) {\n        this._cache.mcs[componentId].push(object);\n    }\n\n    public __recycleEmitter(emitter: ParticleEmitter) {\n        this._effects.remove(emitter);\n        this.__recycleEmitterCore(emitter.core);\n        this._cache.emitters.push(emitter);\n    }\n\n    public __recycleEffectSequence(effectSequence: EffectSequence) {\n        this._effects.remove(effectSequence);\n        this._cache.effectSequences.push(effectSequence);\n    }\n\n    public __recycleEmitterCore(core: BaseEmitterCore) {\n        this._cache.cores[core.type].push(core);\n    }\n\n    // *********************************************************************************************\n    // * Private\t\t\t\t\t\t\t\t\t\t\t\t\t                               *\n    // *********************************************************************************************\n    private parseObject(object: any, filter?: string): IParseSpriteSheetResult {\n        let frames: Map<String, PIXI.Texture>;\n\n        if (object instanceof Map) {\n            frames = new Map();\n            const mapObject = object as Map<any, any>;\n            const values = mapObject.values();\n\n            for (const [key, value] of mapObject) {\n                if (value instanceof PIXI.Texture) {\n                    frames[key] = value;\n                }\n            }\n        } else {\n            frames = object as Map<String, PIXI.Texture>;\n        }\n\n        const mcs: Record<any, any> = {};\n        const result: IParseSpriteSheetResult = { sprites: [], movieClips: [] };\n        for (let i in frames) {\n            if (filter && i.indexOf(filter) == -1) {\n                continue;\n            }\n            this.initSprite(i, { texture: i, anchorX: 0.5, anchorY: 0.5 });\n            result.sprites.push(i);\n            if (i.substr(0, 3) == 'mc_') {\n                const parts = i.split('_');\n                const group = parts[1];\n                if (mcs[group] == null) mcs[group] = [];\n                mcs[group].push(i);\n            }\n        }\n        for (let i in mcs) {\n            let textures = mcs[i];\n            result.movieClips.push(i);\n            this.initMovieClip(i, { textures: textures, anchorX: 0.5, anchorY: 0.5 });\n        }\n        return result;\n    }\n}\n\n\n// *********************************************************************************************\n// * Interfaces\t\t\t\t\t\t\t\t\t\t\t\t                                   *\n// *********************************************************************************************\n\n/**\n * Represents the base effect interface.\n */\nexport interface IBaseEffect {\n    /**\n     * The name of the effect.\n     */\n    name: string;\n    /**\n     * The unique identifier of the effect.\n     */\n    id: any;\n    /**\n     * The type of the effect.\n     */\n    type: number;\n    /**\n     * The container ID associated with the effect.\n     */\n    containerId: string;\n}\n/**\n * Interface for emitter settings\n */\nexport interface IEmitterSettings extends IBaseEffect {\n    /**\n     * Core settings for the emitter\n     */\n    core: ICoreSettings;\n    /**\n     * Minimum frequency at which particles are spawned\n     */\n    spawnFrequencyMin: number;\n    /**\n     * Maximum frequency at which particles are spawned\n     */\n    spawnFrequencyMax: number;\n    /**\n     * Settings for individual particles\n     */\n    particleSettings: IParticleSettings;\n    /**\n     * Maximum number of particles\n     */\n    maxParticles: number;\n    /**\n     * Minimum number of particles spawned at once\n     */\n    spawnCountMin: number;\n    /**\n     * Maximum number of particles spawned at once\n     */\n    spawnCountMax: number;\n    /**\n     * Duration of the emitter in seconds\n     */\n    duration: number;\n    /**\n     * Flag indicating if the emitter should run indefinitely\n     */\n    infinite: boolean;\n    /**\n     * Flag indicating if gravity should be applied to particles\n     */\n    useGravity: boolean;\n    /**\n     * Gravity value applied to particles\n     */\n    gravity: number;\n    /**\n     * Flag indicating if particles should collide with a floor\n     */\n    useFloor: boolean;\n    /**\n     * Y position of the floor\n     */\n    floorY: number;\n    /**\n     * Rotation of the emitter in degrees\n     */\n    rotation: number;\n    /**\n     * Automatic rotation of the emitter in degrees per second\n     */\n    autoRotation: number;\n    /**\n     * Array of child emitters spawned by this emitter\n     */\n    childs: IEmitterSpawn[];\n}\n\n/**\n * Interface representing an emitter spawn.\n */\nexport interface IEmitterSpawn {\n    /**\n     * Unique identifier for the spawn.\n     */\n    id: string;\n\n    /**\n     * Type of the spawn.\n     */\n    type: number;\n\n    /**\n     * Scale of the spawn.\n     */\n    scale: number;\n\n    /**\n     * Name of the spawn.\n     */\n    name: string;\n\n    /**\n     * Whether the spawn should adopt rotation.\n     */\n    adoptRotation: boolean;\n\n    /**\n     * Identifier of the container for the spawn.\n     */\n    containerId: string;\n}\n\n/**\n * Represents the spawns of an emitter at different stages.\n */\nexport interface IEmitterSpawns {\n    /**\n     * Spawns when the emitter starts.\n     */\n    onStart: IEmitterSpawn[];\n\n    /**\n     * Spawns when the emitter reaches halfway.\n     */\n    onHalfway: IEmitterSpawn[];\n\n    /**\n     * Spawns when the emitter bounces.\n     */\n    onBounce: IEmitterSpawn[];\n\n    /**\n     * Spawns when the emitter completes.\n     */\n    onComplete: IEmitterSpawn[];\n}\n\n/**\n * Represents the settings for an effect sequence.\n */\nexport interface IEffectSequenceSettings extends IBaseEffect {\n    /**\n     * The effects in the sequence.\n     */\n    effects: IEffectSettings[];\n\n    /**\n     * The delay before the sequence starts.\n     */\n    delay: number;\n\n    /**\n     * The minimum scale of the effects.\n     */\n    scaleMin: number;\n\n    /**\n     * The maximum scale of the effects.\n     */\n    scaleMax: number;\n}\n\n/**\n * Represents the settings for an effect.\n */\nexport interface IEffectSettings {\n    /**\n     * The ID of the component.\n     */\n    componentId: string;\n\n    /**\n     * The type of the component.\n     */\n    componentType: EffectSequenceComponentType;\n\n    /**\n     * The delay before the effect starts.\n     */\n    delay: number;\n\n    /**\n     * The parameters of the component.\n     */\n    componentParams: IMovieClipComponentParams | IBaseComponentParams;\n\n    /**\n     * The minimum scale of the effect.\n     */\n    scaleMin: number;\n\n    /**\n     * The maximum scale of the effect.\n     */\n    scaleMax: number;\n\n    /**\n     * The minimum alpha of the effect.\n     */\n    alphaMin: number;\n\n    /**\n     * The maximum alpha of the effect.\n     */\n    alphaMax: number;\n\n    /**\n     * The minimum rotation of the effect.\n     */\n    rotationMin: number;\n\n    /**\n     * The maximum rotation of the effect.\n     */\n    rotationMax: number;\n\n    /**\n     * The blend mode of the effect.\n     */\n    blendMode: number;\n\n    /**\n     * The tint of the effect.\n     */\n    tint: number;\n\n    /**\n     * The duration of the effect.\n     */\n    duration: number;\n\n    /**\n     * The ID of the container.\n     */\n    containerId: string;\n\n    /**\n     * The trigger value of the effect.\n     */\n    triggerValue: string;\n}\n\n/**\n * Represents the settings for a sprite.\n */\nexport interface ISpriteSettings {\n    /**\n     * The texture of the sprite.\n     */\n    texture: string;\n\n    /**\n     * The X anchor of the sprite.\n     */\n    anchorX: number;\n\n    /**\n     * The Y anchor of the sprite.\n     */\n    anchorY: number;\n}\n\n/**\n * Interface for MovieClip settings.\n */\nexport interface IMovieClipSettings {\n    /**\n     * Array of texture strings.\n     */\n    textures: string[];\n\n    /**\n     * X-coordinate of the anchor point.\n     */\n    anchorX: number;\n\n    /**\n     * Y-coordinate of the anchor point.\n     */\n    anchorY: number;\n}\n\n/**\n * Interface for core settings.\n */\nexport interface ICoreSettings {\n    /**\n     * Type of core.\n     */\n    type: string;\n\n    /**\n     * Parameters for the core.\n     */\n    params: ICircleCoreParams | IRingCoreParams | IBoxCoreParams;\n}\n\n/**\n * Interface for circle core parameters.\n */\nexport interface ICircleCoreParams {\n    /**\n     * Radius of the circle.\n     */\n    radius: number;\n\n    /**\n     * Flag indicating if the core is radial.\n     */\n    radial: boolean;\n\n    /**\n     * Angle of the core.\n     */\n    angle: number;\n}\n\n/**\n * Interface for ring core parameters.\n */\nexport interface IRingCoreParams {\n    /**\n     * Radius of the ring.\n     */\n    radius: number;\n\n    /**\n     * Flag indicating if the core is radial.\n     */\n    radial: boolean;\n\n    /**\n     * Angle of the core.\n     */\n    angle: number;\n\n    /**\n     * Flag indicating if the ring is uniform.\n     */\n    uniform: boolean;\n}\n\n/**\n * Interface for box core parameters.\n */\nexport interface IBoxCoreParams {\n    /**\n     * Width of the box.\n     */\n    width: number;\n\n    /**\n     * Height of the box.\n     */\n    height: number;\n\n    /**\n     * Flag indicating if the core is radial.\n     */\n    radial: boolean;\n}\n\nexport interface IParticleSettings {\n    /**\n     * The type of component.\n     */\n    componentType: ComponentType;\n\n    /**\n     * The ID of the component.\n     */\n    componentId: string;\n\n    /**\n     * The parameters for the base component.\n     */\n    componentParams: IBaseComponentParams;\n\n    /**\n     * The minimum duration of the particle.\n     */\n    durationMin: number;\n\n    /**\n     * The maximum duration of the particle.\n     */\n    durationMax: number;\n\n    /**\n     * Flag indicating whether motion is enabled.\n     */\n    useMotion: boolean;\n\n    /**\n     * Flag indicating whether rotation is enabled.\n     */\n    useRotation: boolean;\n\n    /**\n     * Flag indicating whether alpha is enabled.\n     */\n    useAlpha: boolean;\n\n    /**\n     * Flag indicating whether scale is enabled.\n     */\n    useScale: boolean;\n\n    /**\n     * Flag indicating whether tint is enabled.\n     */\n    useTint: boolean;\n\n    /**\n     * Flag indicating whether child particles are enabled.\n     */\n    useChilds: boolean;\n\n    /**\n     * Flag indicating whether spawn particles are enabled.\n     */\n    useSpawns: boolean;\n\n    /**\n     * The minimum distance of the particle.\n     */\n    distanceMin: number;\n\n    /**\n     * The maximum distance of the particle.\n     */\n    distanceMax: number;\n\n    /**\n     * The easing function for the distance.\n     */\n    distanceEase: string;\n\n    /**\n     * The minimum move speed of the particle.\n     */\n    moveSpeedMin: number;\n\n    /**\n     * The maximum move speed of the particle.\n     */\n    moveSpeedMax: number;\n\n    /**\n     * The minimum bounce factor of the particle.\n     */\n    bounceFacMin: number;\n\n    /**\n     * The maximum bounce factor of the particle.\n     */\n    bounceFacMax: number;\n\n    /**\n     * The minimum friction of the particle.\n     */\n    frictionMin: number;\n\n    /**\n     * The maximum friction of the particle.\n     */\n    frictionMax: number;\n\n    /**\n     * Flag indicating whether alignment is enabled.\n     */\n    align: boolean;\n\n    /**\n     * The blend mode of the particle.\n     */\n    blendMode: number;\n\n    /**\n     * Flag indicating whether the particle is rendered on top.\n     */\n    addOnTop: boolean;\n\n    /**\n     * The minimum rotation speed of the particle.\n     */\n    rotationSpeedMin: number;\n\n    /**\n     * The maximum rotation speed of the particle.\n     */\n    rotationSpeedMax: number;\n\n    /**\n     * Flag indicating whether the rotation direction is random.\n     */\n    randomRotationDirection: boolean;\n\n    /**\n     * Flag indicating whether the start rotation is random.\n     */\n    randomStartRotation: boolean;\n\n    /**\n     * Flag indicating whether fade in is enabled.\n     */\n    fadeIn: boolean;\n\n    /**\n     * The fade in duration factor of the particle.\n     */\n    fadeInDurationFac: number;\n\n    /**\n     * The easing function for the fade in.\n     */\n    fadeInEase: string;\n\n\n    /** \n     * Minimum starting alpha value\n     * @type {number}\n     */\n    alphaStartMin: number;\n\n    /**\n     * Maximum starting alpha value\n     * @type {number}\n     */\n    alphaStartMax: number;\n\n    /**\n     * Minimum ending alpha value\n     * @type {number}\n     */\n    alphaEndMin: number;\n\n    /**\n     * Maximum ending alpha value\n     * @type {number}\n     */\n    alphaEndMax: number;\n\n    /**\n     * Easing function for alpha transitions\n     * @type {string}\n     */\n    alphaEase: string;\n\n    /**\n     * Starting tint value\n     * @type {number}\n     */\n    tintStart: number;\n\n    /**\n     * Ending tint value\n     * @type {number}\n     */\n    tintEnd: number;\n\n    /**\n     * Easing function for tint transitions\n     * @type {string}\n     */\n    tintEase: string;\n\n    /**\n     * Whether to scale in or not\n     * @type {boolean}\n     */\n    scaleIn: boolean;\n\n    /**\n     * Duration factor for scale in animation\n     * @type {number}\n     */\n    scaleInDurationFac: number;\n\n    /**\n     * Easing function for scale in animation\n     * @type {string}\n     */\n    scaleInEase: string;\n\n    /**\n     * Whether to use uniform scaling or not\n     * @type {boolean}\n     */\n    uniformScale: boolean;\n\n    /**\n     * Minimum starting scale X value\n     * @type {number}\n     */\n    scaleXStartMin: number;\n\n    /**\n     * Maximum starting scale X value\n     * @type {number}\n     */\n    scaleXStartMax: number;\n\n    /**\n     * Minimum ending scale X value\n     * @type {number}\n     */\n    scaleXEndMin: number;\n\n    /**\n     * Maximum ending scale X value\n     * @type {number}\n     */\n    scaleXEndMax: number;\n\n    /**\n     * Easing function for scale X transitions\n     * @type {string}\n     */\n    scaleXEase: string;\n\n    /**\n     * Minimum starting scale Y value\n     * @type {number}\n     */\n    scaleYStartMin: number;\n\n    /**\n     * Maximum starting scale Y value\n     * @type {number}\n     */\n    scaleYStartMax: number;\n\n    /**\n     * Minimum ending scale Y value\n     * @type {number}\n     */\n    scaleYEndMin: number;\n\n    /**\n     * Maximum ending scale Y value\n     * @type {number}\n     */\n    scaleYEndMax: number;\n\n    /**\n     * Easing function for scale Y transitions\n     * @type {string}\n     */\n    scaleYEase: string;\n\n    /**\n     * Minimum starting scale value\n     * @type {number}\n     */\n    scaleStartMin: number;\n\n    /**\n     * Maximum starting scale value\n     * @type {number}\n     */\n    scaleStartMax: number;\n\n    /**\n     * Minimum ending scale value\n     * @type {number}\n     */\n    scaleEndMin: number;\n\n    /**\n     * Maximum ending scale value\n     * @type {number}\n     */\n    scaleEndMax: number;\n\n    /**\n     * Easing function for scale transitions\n     * @type {string}\n     */\n    scaleEase: string;\n\n    /**\n     * Whether to stop emitting particles on bounce\n     * @type {boolean}\n     */\n    stopOnBounce: boolean;\n\n    /**\n     * The spawn configuration\n     * @type {IEmitterSpawns}\n     */\n    spawn: IEmitterSpawns;\n\n    /**\n     * The child emitter spawns\n     * @type {IEmitterSpawn[]}\n     */\n    childs: IEmitterSpawn[];\n}\n\n/**\n * Parameters for the MovieClipComponent.\n */\nexport interface IMovieClipComponentParams extends IBaseComponentParams {\n    /**\n     * Minimum animation speed.\n     */\n    animationSpeedMin: number;\n    /**\n     * Maximum animation speed.\n     */\n    animationSpeedMax: number;\n    /**\n     * Whether the animation should loop.\n     */\n    loop: boolean;\n}\n\n/**\n * Base parameters for a component.\n */\nexport interface IBaseComponentParams {\n    /**\n     * X coordinate of the anchor point.\n     */\n    anchorX: number;\n    /**\n     * Y coordinate of the anchor point.\n     */\n    anchorY: number;\n}\n\n/**\n * Parent interface for particle emitters.\n */\nexport interface IParticleEmitterParent {\n    /**\n     * Remove a child emitter.\n     * @param emitter The emitter to remove.\n     * @returns The removed emitter.\n     */\n    __removeChildEmitter(emitter: any): any;\n}\n\n/**\n * Interface for a particle.\n */\nexport interface IParticle extends IParticleEmitterParent {\n    /**\n     * The component ID of the particle.\n     */\n    componentId: string;\n\n    /**\n     * Initialize the particle.\n     * @param emitter The particle emitter.\n     * @param def The particle settings.\n     * @param scaleMod The scale modifier.\n     * @returns The initialized particle.\n     */\n    init(emitter: ParticleEmitter, def: IParticleSettings, scaleMod?: number): IParticle;\n\n    /**\n     * Update the particle.\n     * @param dt The time delta.\n     */\n    update(dt: number): void;\n\n    /**\n     * Recycle the particle.\n     */\n    recycle(): void;\n\n    /**\n     * Dispose the particle.\n     */\n    dispose(): void;\n}\n\n/**\n * Result of parsing a sprite sheet.\n */\nexport interface IParseSpriteSheetResult {\n    /**\n     * List of sprite names.\n     */\n    sprites: string[];\n    /**\n     * List of movie clip names.\n     */\n    movieClips: string[];\n}\n\n/**\n * Additional asset information.\n */\nexport interface IAdditionalAsset {\n    /**\n     * The name of the asset.\n     */\n    name: string;\n    /**\n     * The URL of the asset.\n     */\n    url: string;\n}\n\n\n\n"],"names":["ComponentType","LinkedList","node","next","ret","Node","data","dt","BaseEffect","componentId","PIXI","value","Rnd","min","max","chance","FXSignal","callback","scope","callRate","FXSignalListener","params","list","call","once","ParticleEmitter","container","autoStart","scaleMod","s","RX","l","def","em","waitForParticles","t","fx","n","ps","p","component","on","childs","child","particle","emitter","index","type","EffectSequenceComponentType","i","EffectSequence","delay","effect","MovieClip","textures","anchorX","anchorY","Color","startRgb","targetRgb","ease","time","duration","Easing","b","c","d","a","v","Particle","settings","speed","mod","dt2","Sanitizer","bundle","structure","sequence","bundleObject","structureObject","spawnStructureObject","propName","bundleProp","structureProp","spawn","spawnPropName","Sprite","texture","BaseEmitterCore","spawnCount","BoxEmitterCore","w2","h2","angle","x","y","CircleEmitterCore","r","RingEmitterCore","FX","delta","bundleSettingsUrl","spritesheetUrl","spritesheetFilter","additionalAssets","resolve","reject","assets","bundleSettings","clearCache","preset","key","name","pool","effectSequence","autoRecycleOnComplete","cloneSettings","dispose","spriteSheet","filter","cache","sprite","mc","object","core","frames","mapObject","mcs","result","group"],"mappings":"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"}