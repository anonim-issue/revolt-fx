{"version":3,"file":"revoltfx.js","sources":["../../src/ComponentType.ts","../../src/util/LinkedList.ts","../../src/BaseEffect.ts","../../src/util/Rnd.ts","../../src/util/FXSignal.ts","../../src/ParticleEmitter.ts","../../src/EffectSequenceComponentType.ts","../../src/EffectSequence.ts","../../src/MovieClip.ts","../../src/util/Color.ts","../../src/util/Easing.ts","../../src/Particle.ts","../../src/Sanitizer.ts","../../src/Sprite.ts","../../src/core/BaseEmitterCore.ts","../../src/core/BoxEmitterCore.ts","../../src/core/CircleEmitterCore.ts","../../src/core/RingEmitterCore.ts","../../src/FX.ts"],"sourcesContent":["export enum ComponentType {\n    Sprite,\n    MovieClip\n}","export class LinkedList {\n\n    public __length: number;\n    public first: Node;\n    public last: Node;\n\n    constructor() {\n        this.__length = 0;\n    }\n\n    // *********************************************************************************************\n    // * Public\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                       *\n    // *********************************************************************************************\n    public get length(): number {\n        return this.__length;\n    }\n\n    public add(node: Node): LinkedList {\n        if (this.first == null) {\n            this.first = this.last = node;\n        } else {\n            node.prev = this.last;\n            this.last.next = node;\n            this.last = node;\n        }\n        node.list = this;\n        this.__length++;\n        return this;\n    }\n\n    public remove(node: Node): LinkedList {\n        if (node.list == null) {\n            return;\n        }\n\n        if (this.first === this.last) {\n            this.first = this.last = null;\n        } else if (this.__length > 0) {\n            if (node === this.last) {\n                node.prev.next = null;\n                this.last = node.prev;\n            } else if (node === this.first) {\n                node.next.prev = null;\n                this.first = node.next;\n            } else {\n                node.next.prev = node.prev;\n                node.prev.next = node.next;\n            }\n        }\n        node.next = node.prev = node.list = null;\n        this.__length--;\n        return this;\n    }\n\n    public clear() {\n        if (!this.first) return;\n        let node = this.first;\n        while (node) {\n            let next = node.next;\n            node.next = node.prev = node.list = null;\n            node = next;\n        }\n        this.first = this.last = null;\n    }\n\n    public toArray(): Node[] {\n        const ret: Node[] = [];\n        if (!this.first) return ret;\n        let node = this.first;\n        while (node) {\n            ret.push(node);\n            node = node.next;\n        }\n        return ret;\n    }\n\n}\n\nexport class Node {\n    public next: Node;\n    public prev: Node;\n    public list: LinkedList;\n\n    constructor(public data?: any) {\n\n    }\n\n    public update(dt: number) {\n\n    }\n\n    public dispose() {\n\n    }\n\n}\n","/// <reference types=\"pixi.js\" />\n\nimport * as PIXI from \"pixi.js\";\nimport { IEffectSequenceSettings, IEmitterSettings, FX, IParticleEmitterParent } from \"./FX\";\nimport { Node } from \"./util/LinkedList\";\n\nexport class BaseEffect extends Node {\n\n    public container!: PIXI.Container;\n    public exhausted: boolean = false;\n    public completed: boolean = false;\n\n    public name: string = \"\";\n\n    public endTime: number = 0;\n\n    protected _x: number = 0;\n    protected _y: number = 0;\n    protected _rotation: number = 0;\n    protected _alpha: number = 0;\n\n    protected _scale: PIXI.Point = new PIXI.Point();\n    protected _time: number = 0;\n\n    protected _active: boolean = false;\n\n    public __fx: FX;\n    public __recycled: boolean = true;\n\n\n    constructor(public componentId: string) {\n        super();\n    }\n\n    // *********************************************************************************************\n    // * Public\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                                           *\n    // *********************************************************************************************\n\n\n    public update(dt: number) {\n\n    }\n\n    public recycle() {\n\n    }\n\n    public get active(): boolean {\n        return this._active;\n    }\n\n    public get scale(): PIXI.Point {\n        return this._scale;\n    }\n\n    public set scale(value: PIXI.Point) {\n        this._scale = value;\n    }\n\n    public get alpha(): number {\n        return this._alpha;\n    }\n\n    public set alpha(value: number) {\n        this._alpha = value;\n    }\n\n    public set rotation(value: number) {\n        this._rotation = value;\n    }\n\n    public get rotation(): number {\n        return this._rotation;\n    }\n\n    public get y(): number {\n        return this._y;\n    }\n\n    public set y(value: number) {\n        this._y = value;\n    }\n\n    public get x(): number {\n        return this._x;\n    }\n\n    public set x(value: number) {\n        this._x = value;\n    }\n\n    // *********************************************************************************************\n    // * internal\t\t\t\t\t\t\t\t\t\t                                        \t\t\t\t\t\t\t\t\t\t   *\n    // *********************************************************************************************\n    public __applySettings(value: IEffectSequenceSettings | IEmitterSettings) {\n    }\n\n}\n","export class Rnd {\n  public static float(min: number, max: number): number {\n    return Math.random() * (max - min) + min;\n  }\n\n  public static bool(chance: number = 0.5): boolean {\n    return Math.random() < chance;\n  }\n\n  public static sign(chance: number = 0.5): number {\n    return Math.random() < chance ? 1 : -1;\n  }\n\n  public static bit(chance: number = 0.5): number {\n    return Math.random() < chance ? 1 : 0;\n  }\n\n  public static integer(min: number, max: number): number {\n    return Math.floor(Math.random() * (max - min) + min);\n  }\n}\n","import { LinkedList, Node } from \"./LinkedList\";\nimport { Particle } from \"../Particle\";\nimport { ParticleEmitter } from \"../ParticleEmitter\";\nimport { MovieClip } from \"../MovieClip\";\nimport { Sprite } from \"../Sprite\";\n\nexport class FXSignal {\n\n    public __hasCallback: boolean = false;\n    private _list: LinkedList = new LinkedList();\n\n\n    constructor() {\n    }\n\n    public add(callback: Function, scope?: any, callRate?: number) {\n        this._list.add(new Node(new FXSignalListener(callback, scope, false, callRate)));\n        this.__hasCallback = true;\n    }\n\n    public addOnce(callback: Function, scope?: any) {\n        this._list.add(new Node(new FXSignalListener(callback, scope, true)));\n        this.__hasCallback = true;\n    }\n\n    public dispatch(...params: any[]) {\n\n        const list = this._list;\n        let node = list.first;\n        let next;\n        while (node) {\n            next = node.next;\n            let call = true;\n            const data = <FXSignalListener>node.data;\n            if (data.callRate) {\n                if (data.calls % data.callRate != 0) {\n                    call = false;\n                }\n            }\n            if (call) {\n                data.callback.apply(data.scope, params);\n                if (data.once) {\n                    list.remove(node);\n                }\n            }\n            node = next;\n        }\n        this.__hasCallback = list.__length > 0;\n    }\n\n    public remove(callback: Function) {\n        const list = this._list;\n        let node = list.first;\n        let next;\n        while (node) {\n            next = node.next;\n            if (node.data.callback === callback) {\n                list.remove(node);\n                return;\n            }\n            node = next;\n        }\n        this.__hasCallback = list.__length > 0;\n    }\n\n    public removeAll() {\n        this._list.clear();\n        this.__hasCallback = false;\n    }\n\n}\n\nexport class FXSignalListener {\n    public calls: number = 0;\n    constructor(public callback: Function,\n        public scope?: any,\n        public once?: boolean,\n        public callRate?: number) { }\n}","/// <reference types=\"pixi.js\" />\n\nimport * as PIXI from \"pixi.js\";\nimport { BaseEffect } from \"./BaseEffect\";\nimport { IEmitterSettings, IMovieClipComponentParams, IParticleEmitterParent } from \"./FX\";\nimport { LinkedList } from \"./util/LinkedList\";\nimport { BaseEmitterCore } from \"./core/BaseEmitterCore\";\nimport { Particle } from \"./Particle\";\nimport { Rnd } from \"./util/Rnd\";\nimport { FXSignal } from \"./util/FXSignal\";\n\nexport interface IParticleEmitterSignals {\n    started: FXSignal;\n    completed: FXSignal;\n    exhausted: FXSignal;\n    particleSpawned: FXSignal;\n    particleBounced: FXSignal;\n    particleDied: FXSignal;\n    particleUpdated: FXSignal;\n}\n\n\nexport class ParticleEmitter extends BaseEffect implements IParticleEmitterParent {\n\n    public infinite: boolean;\n    public target: PIXI.DisplayObject;\n    public targetOffset: number = 0;\n\n    public core: BaseEmitterCore;\n\n    public settings: IEmitterSettings | undefined;\n    public autoRecycleOnComplete: boolean = true;\n\n    private _particles: LinkedList = new LinkedList();\n\n    private _particleCount: number = 0;\n    private _spawnOnComplete: boolean;\n    private _childEmitters: ParticleEmitter[] = [];\n    private _hasChildEmitters: boolean = false;\n\n    private _xPosIntialized: boolean;\n    private _yPosIntialized: boolean;\n\n    private _nextSpawnTime: number;\n    private _scaleMod: number;\n    private _paused: boolean = false;\n\n    public __parent: IParticleEmitterParent | undefined;\n    public __adoptRotation: boolean = false;\n\n    public __on: IParticleEmitterSignals = {\n        started: new FXSignal(),\n        completed: new FXSignal(),\n        exhausted: new FXSignal(),\n        particleUpdated: new FXSignal(),\n        particleSpawned: new FXSignal(),\n        particleBounced: new FXSignal(),\n        particleDied: new FXSignal()\n    };\n\n    constructor(componentId: string) {\n        super(componentId);\n    }\n\n    // *********************************************************************************************\n    // * Public\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                                        \t\t\t\t\t   *\n    // *********************************************************************************************\n    public init(container: PIXI.Container, autoStart: boolean = true, scaleMod: number = 1): ParticleEmitter {\n        this.container = container;\n        this.core.__scaleMod = this._scaleMod = scaleMod;\n        if (autoStart) this.start();\n        return this;\n    }\n\n    public start(): ParticleEmitter {\n        if (this._active) return this;\n\n        const t = Date.now();\n        const s = this.settings!;\n        const RX = this.__fx;\n\n        RX.emitterCount++;\n\n        this.infinite = s.infinite;\n        this._time = Number.MAX_VALUE;\n\n        if (s.duration > 0) {\n            this.endTime = t + s.duration * 1000;\n        } else {\n            this.endTime = s.duration;\n        }\n\n        this._nextSpawnTime = 0;\n        this._particleCount = 0;\n        this._active = true;\n        this.exhausted = this.completed = false;\n\n        RX.__addActiveEffect(this);\n\n        let l = s.childs.length;\n        this._hasChildEmitters = l > 0;\n        if (this._hasChildEmitters) {\n            while (--l > -1) {\n                const def = s.childs[l];\n                const em = RX.getParticleEmitterById(def.id);\n                const container = RX.__containers[em.settings!.containerId] || this.container;\n                em.init(container, true, (def.scale || 1) * (this._scaleMod || 1));\n                if (def.adoptRotation) {\n                    em.rotation = this._rotation;\n                    em.__adoptRotation = true;\n                }\n                em.__parent = this;\n                this._childEmitters.push(em);\n            }\n        }\n\n        this.rotation = this._rotation;\n\n        if (this.__on.started.__hasCallback) {\n            this.__on.started.dispatch(this);\n        }\n\n        return this;\n    }\n\n    public stop(waitForParticles: boolean = true) {\n        if (waitForParticles) {\n            this.exhausted = true;\n            if (this._hasChildEmitters) {\n                this.stopChildEmitters(true);\n            }\n        } else {\n\n            if (this.__on.completed.__hasCallback) {\n                this.__on.completed.dispatch(this);\n            }\n\n            if (this.autoRecycleOnComplete) {\n                this.recycle();\n            } else {\n                this.recycleParticles();\n                this.completed = true;\n                this._active = false;\n                this.__fx.__removeActiveEffect(this);\n            }\n        }\n    }\n\n    public update(dt: number): ParticleEmitter {\n\n        if (!this._active) return this;\n        const t = Date.now();\n\n        const s = this.settings!;\n\n        if (!this.exhausted) {\n            if (this.settings!.autoRotation !== 0) {\n                this.rotation += s.autoRotation * (dt / 0.016666);\n            }\n            if (this.target) {\n                this.rotation = this.target.rotation;\n                if (this.targetOffset == 0) {\n                    this.x = this.target.x;\n                    this.y = this.target.y;\n                } else {\n                    this.x = this.target.x + Math.cos(this._rotation) * this.targetOffset;\n                    this.y = this.target.y + Math.sin(this._rotation) * this.targetOffset;\n                }\n            }\n\n            if (this.endTime == 0 && !this.infinite) {\n                this.spawn();\n                this.exhausted = true;\n            } else if (this.infinite || t < this.endTime) {\n                this._time += dt;\n                if (this._time >= this._nextSpawnTime) {\n                    this._time = 0;\n                    this.spawn();\n                    this._nextSpawnTime = this._time + Rnd.float(s.spawnFrequencyMin, s.spawnFrequencyMax);\n                }\n            } else {\n                this.exhausted = true;\n                if (this.__on.exhausted.__hasCallback) {\n                    this.__on.exhausted.dispatch(this);\n                }\n            }\n        } else {\n            if (this._particleCount == 0) {\n                this._active = false;\n                this.completed = true;\n                if (this.__on.completed.__hasCallback) {\n                    this.__on.completed.dispatch(this);\n                }\n                this.__fx.__removeActiveEffect(this);\n                if (this.autoRecycleOnComplete) this.recycle();\n            }\n        }\n\n        const list = this._particles;\n        let node = <Particle>list.first;\n        let next;\n        while (node) {\n            next = <Particle>node.next;\n            node.update(dt);\n            node = next;\n        }\n        return this;\n    }\n\n    public spawn(): ParticleEmitter {\n        if (this._paused) return this;\n\n        const s = this.settings!;\n        const fx = this.__fx;\n\n        let n = Rnd.integer(s.spawnCountMin, s.spawnCountMax) * fx.particleFac;\n        this.core.prepare(n);\n\n        while (--n > -1) {\n            if (this._particleCount >= s.maxParticles || fx.particleCount >= fx.maxParticles) return this;\n\n            const ps = s.particleSettings;\n            const p = <Particle>fx.__getParticle();\n            let component;\n\n            switch (ps.componentType) {\n                case 0:\n                    p.componentId = <string>ps.componentId;\n                    component = fx.__getSprite(p.componentId);\n                    break;\n\n                case 1:\n                    p.componentId = <string>ps.componentId;\n                    component = fx.__getMovieClip(p.componentId);\n                    if (ps.componentParams) {\n                        component.loop = (<IMovieClipComponentParams>ps.componentParams).loop == null || !(<IMovieClipComponentParams>ps.componentParams).loop ? false : true;\n                        component.animationSpeed = Rnd.float((<IMovieClipComponentParams>ps.componentParams).animationSpeedMin || 1, (<IMovieClipComponentParams>ps.componentParams).animationSpeedMax || 1);\n                    }\n                    component.gotoAndPlay(0);\n                    break;\n            }\n\n            component.anchor.set(ps.componentParams.anchorX, ps.componentParams.anchorY);\n\n            p.component = component;\n            this.core.emit(p);\n            p.init(this, ps, this._scaleMod);\n\n            this._particles.add(p);\n            this._particleCount++;\n            fx.particleCount++;\n\n\n        }\n\n        this.core.step();\n\n        this._nextSpawnTime = Rnd.float(s.spawnFrequencyMin, s.spawnFrequencyMax);\n\n        return this;\n    }\n\n    public recycle() {\n\n        if (this.__recycled) return;\n\n        if (this.__parent) {\n            this.__parent.__removeChildEmitter(this);\n            this.__parent = undefined;\n        }\n\n        this.recycleParticles();\n\n        this.settings = undefined;\n        this._active = false;\n        this._paused = false;\n        this.completed = true;\n        this._x = this._y = this._rotation = 0;\n\n        if (this._hasChildEmitters) {\n            this.stopChildEmitters(true);\n            this._childEmitters.length = 0;\n            this._hasChildEmitters = false;\n        }\n\n        this.__fx.emitterCount--;\n        this.__fx.__recycleEmitter(this);\n        this.__recycled = true;\n        this.__adoptRotation = false;\n        this.core = null;\n        this.target = null;\n        this.name = null;\n\n        const on = this.__on;\n        if (on.completed.__hasCallback) on.completed.removeAll();\n        if (on.started.__hasCallback) on.started.removeAll();\n        if (on.exhausted.__hasCallback) on.exhausted.removeAll();\n        if (on.particleBounced.__hasCallback) on.particleBounced.removeAll();\n        if (on.particleDied.__hasCallback) on.particleDied.removeAll();\n        if (on.particleSpawned.__hasCallback) on.particleSpawned.removeAll();\n        if (on.particleUpdated.__hasCallback) on.particleUpdated.removeAll();\n    }\n\n    public dispose() {\n        const list = this._particles;\n        let node = <Particle>list.first;\n        let next;\n        while (node) {\n            next = <Particle>node.next;\n            node.recycle();\n            node = next;\n        }\n        list.clear();\n\n        this.__recycled = true;\n\n        if (this._hasChildEmitters) {\n            this.stopChildEmitters(false);\n        }\n\n        this.__fx.particleCount -= this._particleCount;\n\n        this._particles = null;\n        this.componentId = null;\n        this.settings = null;\n        this._active = false;\n        this.completed = true;\n        this._childEmitters = null;\n\n        if (this.core) {\n            this.core.dispose();\n        }\n        this.core = null;\n\n        this.target = null;\n        this.name = null;\n        const on = this.__on;\n        on.completed.removeAll();\n        on.started.removeAll();\n        on.exhausted.removeAll();\n        on.particleBounced.removeAll();\n        on.particleDied.removeAll();\n        on.particleSpawned.removeAll();\n        on.particleUpdated.removeAll();\n        this.__parent = null;\n\n        this.__fx.__removeActiveEffect(this);\n        this.__fx = null;\n    }\n\n    public get x(): number {\n        return this._x;\n    }\n\n    public set x(value: number) {\n        this._x = this.core.x = value;\n        if (!this._xPosIntialized) {\n            this.core.__x = value;\n            this._xPosIntialized = true;\n        }\n\n        if (this._hasChildEmitters) {\n            const childs = this._childEmitters;\n            let l = childs.length;\n            while (--l > -1) {\n                childs[l].x = value;\n            }\n        }\n    }\n\n    public get y(): number {\n        return this._y;\n    }\n\n    public set y(value: number) {\n        this._y = this.core.y = value;\n        if (!this._yPosIntialized) {\n            this.core.__y = value;\n            this._yPosIntialized = true;\n        }\n\n        if (this._hasChildEmitters) {\n            const childs = this._childEmitters;\n            let l = childs.length;\n            while (--l > -1) {\n                childs[l].y = value;\n            }\n        }\n    }\n\n\n    public set rotation(value: number) {\n        this._rotation = this.core.rotation = value;\n        if (this._hasChildEmitters) {\n            const childs = this._childEmitters;\n            let l = childs.length;\n            while (--l > -1) {\n                const child = childs[l];\n                if (child.__adoptRotation) {\n                    child.rotation = child.settings.rotation + value;\n                }\n            }\n        }\n    }\n\n    public get rotation(): number {\n        return this._rotation;\n    }\n\n    public get paused(): boolean {\n        return this._paused;\n    }\n\n    public set paused(value: boolean) {\n        this._paused = value;\n        if (this._hasChildEmitters) {\n            const childs = this._childEmitters;\n            let l = childs.length;\n            while (--l > -1) {\n                childs[l].paused = value;\n            }\n        }\n    }\n\n    public get on(): IParticleEmitterSignals {\n        return this.__on;\n    }\n\n    // *********************************************************************************************\n    // * Private\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                                           *\n    // *********************************************************************************************\n    private recycleParticles() {\n        let node = <Particle>this._particles.first;\n        let next;\n        while (node) {\n            next = <Particle>node.next;\n            node.recycle();\n            node = next;\n        }\n        this._particles.clear();\n        this.__fx.particleCount -= this._particleCount;\n    }\n\n    private stopChildEmitters(waitForParticles: boolean) {\n        const childs = this._childEmitters;\n        let l = childs.length;\n        while (--l > -1) {\n            childs[l].stop(waitForParticles);\n        }\n    }\n\n    // *********************************************************************************************\n    // * Internal\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                                           *\n    // *********************************************************************************************\n    public __removeParticle(particle: Particle) {\n\n        if (particle.useSpawns && this._spawnOnComplete) {\n            this.__subSpawn(particle, this.settings.particleSettings.spawn.onComplete);\n        }\n        this._particles.remove(particle);\n        this._particleCount--;\n        this.__fx.particleCount--;\n        particle.recycle();\n    }\n\n    public __removeChildEmitter(emitter: any) {\n        const index = this._childEmitters.indexOf(emitter);\n        if (index > -1) {\n            this._childEmitters.splice(index, 1);\n            if (this._childEmitters.length == 0) this._hasChildEmitters = false;\n        }\n    }\n\n    public __subSpawn(particle: Particle, list: any) {\n        const fx = this.__fx;\n        if (list) {\n            let l = list.length;\n            while (--l > -1) {\n                const def = list[l];\n                let component;\n                let container;\n                switch (def.type) {\n                    case 0:\n                        component = fx.getParticleEmitterById(def.id);\n                        container = fx.__containers[component.settings.containerId] || this.container;\n                        component.init(container, true, (def.scale || 1) * this._scaleMod);\n                        if (def.adoptRotation) {\n                            component.rotation = particle.component.rotation + component.settings.rotation;\n                            component.__adoptRotation = true;\n                        } else {\n                            component.rotation = component.settings.rotation;\n                        }\n                        break;\n                    case 1:\n                        component = fx.getEffectSequenceById(def.id);\n                        container = fx.__containers[component.settings.containerId] || this.container;\n                        component.init(container, 0, true, (def.scale || 1) * this._scaleMod);\n                        if (def.adoptRotation) {\n                            component.rotation = particle.component.rotation;\n                        }\n                        break;\n                }\n                component.x = particle.component.x;\n                component.y = particle.component.y;\n            }\n        }\n    }\n\n    public __applySettings(value: IEmitterSettings) {\n        const fx = this.__fx;\n\n        this.__recycled = this._xPosIntialized = this._yPosIntialized = false;\n\n        this.settings = value;\n        this.core = fx.__getEmitterCore(value.core.type, this);\n        this.core.init(this);\n        this.rotation = value.rotation;\n\n        this.name = value.name;\n\n        this._spawnOnComplete = value.particleSettings.spawn.onComplete.length > 0;\n\n        this._childEmitters.length = 0;\n\n    }\n\n    public __setCore(type: string) {\n        this.core = this.__fx.__getEmitterCore(type, this);\n        this.core.init(this);\n        this.core.__scaleMod = this._scaleMod;\n        this._xPosIntialized = this._yPosIntialized = false;\n    }\n\n    // *********************************************************************************************\n    // * Private\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                                        \t\t\t   *\n    // *********************************************************************************************\n\n    // *********************************************************************************************\n    // * Events\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                                        \t\t\t\t\t\t   *\n    // *********************************************************************************************\n}\n","export enum EffectSequenceComponentType {\n    Sprite,\n    MovieClip,\n    Emitter,\n    Trigger\n}","/// <reference types=\"pixi.js\" />\n\nimport * as PIXI from \"pixi.js\";\nimport { IEffectSequenceSettings, IEffectSettings, IMovieClipComponentParams } from \"./FX\";\nimport { BaseEffect } from \"./BaseEffect\";\nimport { LinkedList, Node } from \"./util/LinkedList\";\nimport { Sprite } from \"./Sprite\";\nimport { MovieClip } from \"./MovieClip\";\nimport { ParticleEmitter } from \"./ParticleEmitter\";\nimport { Rnd } from \"./util/Rnd\";\nimport { FXSignal } from \"./util/FXSignal\";\nimport { EffectSequenceComponentType } from \"./EffectSequenceComponentType\";\n\nexport interface IEffectSequenceSignals {\n    started: FXSignal;\n    completed: FXSignal;\n    exhausted: FXSignal;\n    effectSpawned: FXSignal;\n    triggerActivated: FXSignal;\n}\n\nexport class EffectSequence extends BaseEffect {\n\n    public settings!: IEffectSequenceSettings;\n\n    private _startTime!: number;\n\n    private _effectStartTime!: number;\n    private _nextEffectSettings!: IEffectSettings;\n\n    private _list: IEffectSettings[] = [];\n    private _index: number;\n    private _scaleMod!: number;\n    private _delay: number;\n\n    private _elements: LinkedList = new LinkedList();\n\n    public __on: IEffectSequenceSignals = {\n        started: new FXSignal(),\n        completed: new FXSignal(),\n        exhausted: new FXSignal(),\n        effectSpawned: new FXSignal(),\n        triggerActivated: new FXSignal()\n    };\n\n    constructor(componentId: string) {\n        super(componentId);\n    }\n\n    // *********************************************************************************************\n    // * Public\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                                        \t\t   *\n    // *********************************************************************************************\n    public init(container: PIXI.Container, delay: number = 0, autoStart: boolean = true, scaleMod: number = 1): EffectSequence {\n        this.container = container;\n        this._scaleMod = scaleMod;\n        this._delay = delay * 1000;\n        if (autoStart) this.start();\n        return this;\n    }\n\n    public start(): EffectSequence | undefined {\n        if (this._active) return;\n\n        this._startTime = Date.now() + (this.settings.delay ? this.settings.delay * 1000 : 0) + this._delay;\n        this._index = 0;\n\n        if (this._list.length == 0) {\n            this._active = false;\n            if (this.__on.exhausted.__hasCallback) {\n                this.__on.exhausted.dispatch(this);\n            }\n            if (this.__on.completed.__hasCallback) {\n                this.__on.completed.dispatch(this);\n            }\n            this.recycle();\n            return this;\n        }\n\n        this.exhausted = this.completed = false;\n\n        this.setNextEffect();\n\n        this.__fx.effectSequenceCount++;\n        this.__fx.__addActiveEffect(this);\n\n        if (this.__on.started.__hasCallback) {\n            this.__on.started.dispatch(this);\n        }\n        return this;\n    }\n\n    public update(dt: number) {\n        const t = Date.now();\n        if (t < this._startTime) return;\n        this._time += dt;\n\n        if (!this.exhausted && t >= this._effectStartTime) {\n            const fx = this.__fx;\n            const def = this._nextEffectSettings;\n            let effect: Sprite | MovieClip | ParticleEmitter;\n            let node: Node;\n            let container: PIXI.Container;\n\n            switch (def.componentType) {\n                case EffectSequenceComponentType.Sprite:\n                    effect = fx.__getSprite(def.componentId);\n                    container = fx.__containers[def.containerId] || this.container;\n                    container.addChild(<Sprite>effect);\n                    (<Sprite>effect).blendMode = fx.useBlendModes ? def.blendMode : 0;\n                    (<Sprite>effect).tint = def.tint;\n                    (<Sprite>effect).scale.set(Rnd.float(def.scaleMin, def.scaleMax) * Rnd.float(this.settings.scaleMin, this.settings.scaleMax) * this._scaleMod);\n                    (<Sprite>effect).alpha = Rnd.float(def.alphaMin, def.alphaMax);\n                    (<Sprite>effect).anchor.set(def.componentParams.anchorX, def.componentParams.anchorY);\n\n                    node = new Node({ component: effect, endTime: t + (def.duration) * 1000 });\n                    this._elements.add(node);\n                    effect.x = this._x;\n                    effect.y = this._y;\n                    effect.rotation = this._rotation + Rnd.float(def.rotationMin, def.rotationMax);\n                    if (this.__on.effectSpawned.__hasCallback) {\n                        this.__on.effectSpawned.dispatch(EffectSequenceComponentType.Sprite, effect);\n                    }\n                    break;\n\n                case EffectSequenceComponentType.MovieClip:\n                    effect = fx.__getMovieClip(def.componentId);\n                    if ((<IMovieClipComponentParams>def.componentParams).loop) {\n                        (<MovieClip>effect).animationSpeed = Rnd.float((<IMovieClipComponentParams>def.componentParams).animationSpeedMin || 1, (<IMovieClipComponentParams>def.componentParams).animationSpeedMax || 1);\n                        (<MovieClip>effect).loop = (<IMovieClipComponentParams>def.componentParams).loop || false;\n                    } else {\n                        const speed = def.duration\n                    }\n\n\n                    (<MovieClip>effect).anchor.set(def.componentParams.anchorX, def.componentParams.anchorY);\n\n                    (<MovieClip>effect).gotoAndPlay(0);\n                    container = fx.__containers[def.containerId] || this.container;\n                    container.addChild(<MovieClip>effect);\n                    (<MovieClip>effect).blendMode = fx.useBlendModes ? def.blendMode : 0;\n                    (<MovieClip>effect).tint = def.tint;\n                    (<MovieClip>effect).scale.set(Rnd.float(def.scaleMin, def.scaleMax) * Rnd.float(this.settings.scaleMin, this.settings.scaleMax) * this._scaleMod);\n                    (<MovieClip>effect).alpha = Rnd.float(def.alphaMin, def.alphaMax);\n\n\n                    node = new Node({ component: effect, endTime: t + (def.duration) * 1000 });\n                    this._elements.add(node);\n                    effect.x = this._x;\n                    effect.y = this._y;\n                    effect.rotation = this._rotation + Rnd.float(def.rotationMin, def.rotationMax);\n                    if (this.__on.effectSpawned.__hasCallback) {\n                        this.__on.effectSpawned.dispatch(EffectSequenceComponentType.MovieClip, effect);\n                    }\n                    break;\n\n                case EffectSequenceComponentType.Emitter:\n                    effect = fx.getParticleEmitterById(def.componentId);\n                    container = fx.__containers[def.containerId] || this.container;\n                    (<ParticleEmitter>effect).init(container, true, Rnd.float(def.scaleMin, def.scaleMax) * Rnd.float(this.settings.scaleMin, this.settings.scaleMax) * this._scaleMod);\n                    node = new Node({ component: effect, endTime: (<ParticleEmitter>effect).endTime });\n                    this._elements.add(node);\n                    effect.x = this._x;\n                    effect.y = this._y;\n                    effect.rotation = this._rotation + effect.settings.rotation;\n                    if (this.__on.effectSpawned.__hasCallback) {\n                        this.__on.effectSpawned.dispatch(EffectSequenceComponentType.Emitter, effect);\n                    }\n                    break;\n\n                case EffectSequenceComponentType.Trigger:\n                    if (this.__on.triggerActivated.__hasCallback) {\n                        this.__on.triggerActivated.dispatch(def.triggerValue);\n                    }\n                    break;\n            }\n\n            if (this._index == this._list.length) {\n                this.exhausted = true;\n                if (this.__on.exhausted.__hasCallback) {\n                    this.__on.exhausted.dispatch(this);\n                }\n            } else {\n                this.setNextEffect();\n            }\n        }\n\n        const list = this._elements;\n        let node = list.first;\n        while (node) {\n            node.update(dt);\n            if (t > node.data.endTime) {\n                const component = node.data.component;\n                if (component instanceof ParticleEmitter) {\n                    if (component.completed) {\n                        list.remove(node);\n                    }\n                } else {\n                    list.remove(node);\n                    component.recycle();\n                }\n            }\n            node = node.next;\n        }\n        if (this.exhausted && list.length == 0) {\n            this._active = false;\n            this.completed = true;\n            if (this.__on.completed.__hasCallback) {\n                this.__on.completed.dispatch(this);\n            }\n            this.recycle();\n        }\n    }\n\n    public stop() {\n        this.recycle();\n    }\n\n    public recycle() {\n        if (this.__recycled) return;\n        const list = this._elements;\n        let node = list.first;\n        let next;\n        while (node) {\n            next = node.next;\n            node.data.component.recycle();\n            node = next;\n        }\n\n        const on = this.__on;\n        if (on.completed.__hasCallback) on.completed.removeAll();\n        if (on.started.__hasCallback) on.started.removeAll();\n        if (on.exhausted.__hasCallback) on.exhausted.removeAll();\n        if (on.effectSpawned.__hasCallback) on.effectSpawned.removeAll();\n        if (on.triggerActivated.__hasCallback) on.triggerActivated.removeAll();\n\n        list.clear();\n        this.__recycled = true;\n        this._x = this._y = this._rotation = 0;\n        this.__fx.effectSequenceCount--;\n        this.__fx.__recycleEffectSequence(this);\n    }\n\n    public dispose() {\n        this._elements.clear();\n        this.__fx = undefined;\n        const on = this.__on;\n        on.completed = on.started = on.exhausted = on.effectSpawned = on.triggerActivated = undefined;\n    }\n\n    public set rotation(value: number) {\n        this._rotation = value;\n        const list = this._elements;\n        let node = list.first;\n        let next;\n        while (node) {\n            next = node.next;\n            node.data.rotation = value;\n            node = next;\n        }\n    }\n\n\n    public get x(): number {\n        return this._x;\n    }\n\n    public set x(value: number) {\n        this._x = value;\n        const list = this._elements;\n        let node = list.first;\n        let next;\n        while (node) {\n            next = node.next;\n            node.data.x = value;\n            node = next;\n        }\n    }\n\n    public get y(): number {\n        return this._y;\n    }\n\n    public set y(value: number) {\n        this._y = value;\n        const list = this._elements;\n        let node = list.first;\n        let next;\n        while (node) {\n            next = node.next;\n            node.data.y = value;\n            node = next;\n        }\n    }\n\n    public get rotation(): number {\n        return this._rotation;\n    }\n\n    public get on(): IEffectSequenceSignals {\n        return this.__on;\n    }\n\n    // *********************************************************************************************\n    // * Private\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t           *                              \t\t   \n    // *********************************************************************************************\n\n    private setNextEffect() {\n        if (this.exhausted) return;\n        const def = this._nextEffectSettings = this._list[this._index++];\n        this._effectStartTime = this._startTime + def.delay * 1000;\n    }\n\n    // *********************************************************************************************\n    // * Internal\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t           *                              \t\t   \n    // *********************************************************************************************\n    public __applySettings(value: IEffectSequenceSettings) {\n        this.settings = value;\n        this.name = value.name;\n        this._list = value.effects.slice();\n        this.__recycled = false;\n    }\n}\n\n","/// <reference types=\"pixi.js\" />\n\nimport { FX } from \"./FX\";\nimport * as PIXI from 'pixi.js';\n\nexport class MovieClip extends PIXI.AnimatedSprite {\n\n    public componentId: string;\n    public __sequenceEndTime: number;\n    public __fx: FX;\n\n    constructor(componentId: string, textures: string[], anchorX?: number, anchorY?: number) {\n        let t = <PIXI.Texture[]>[];\n        let l = textures.length;\n        for (let i = 0; i < l; i++) {\n            t.push(PIXI.Texture.from(textures[i]));\n        }\n        super(t);\n        this.componentId = componentId;\n        this.anchor.set(0.5, 0.5);\n        this.loop = false;\n        this.__sequenceEndTime = 0;\n    }\n\n    // *********************************************************************************************\n    // * Public\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                                        \t\t\t   *\n    // *********************************************************************************************\n    public recycle() {\n        this.alpha = 1;\n        this.tint = 0xffffff;\n        this.rotation = 0;\n        this.scale.set(1);\n        if (this.parent) this.parent.removeChild(this);\n        this.gotoAndStop(0);\n        this.__fx.__recycleMovieClip(this.componentId, this);\n    }\n\n    public dispose() {\n        if (this.parent) this.parent.removeChild(this);\n        this.gotoAndStop(0);\n        this.destroy();\n    }\n\n    // *********************************************************************************************\n    // * Private\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   *\n    // *********************************************************************************************\n\n    // *********************************************************************************************\n    // * Events\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t               *\n    // *********************************************************************************************\n\n}\n","export class Color {\n\n\n  public r: number;\n  public g: number;\n  public b: number;\n\n  public sR: number;\n  public sG: number;\n  public sB: number;\n\n  public dR: number;\n  public dG: number;\n  public dB: number;\n\n  public rgb: number;\n\n  public startRgb: number;\n  public targetRgb: number;\n\n  constructor() {\n  }\n\n  // *********************************************************************************************\n  // * Public\t\t\t\t\t\t\t\t\t                                        \t\t\t\t\t\t\t\t\t\t\t\t   *\n  // *********************************************************************************************\n\n  public setRgb(startRgb: number, targetRgb: number) {\n    this.startRgb = this.rgb = startRgb;\n    this.r = this.sR = (startRgb >> 16) & 0xff;\n    this.g = this.sG = (startRgb >> 8) & 0xff;\n    this.b = this.sB = startRgb & 0xff;\n\n    this.targetRgb = targetRgb;\n\n    this.dR = ((targetRgb >> 16) & 0xff) - this.r;\n    this.dG = ((targetRgb >> 8) & 0xff) - this.g;\n    this.dB = (targetRgb & 0xff) - this.b;\n  }\n\n  public tween(ease: Function, time: number, duration: number): number {\n    if (ease) {\n      this.r = ease(time, this.sR, this.dR, duration);\n      this.g = ease(time, this.sG, this.dG, duration);\n      this.b = ease(time, this.sB, this.dB, duration);\n    } else {\n      time /= duration;\n      this.r = this.dR * time + this.sR;\n      this.g = this.dG * time + this.sG;\n      this.b = this.dB * time + this.sB;\n    }\n\n    this.rgb = (this.r << 16) | (this.g << 8) | this.b;\n    return this.rgb;\n  }\n\n\n  // *********************************************************************************************\n  // * Private\t\t\t\t\t                                        \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   *\n  // *********************************************************************************************\n\n  // *********************************************************************************************\n  // * Events\t\t\t\t\t\t\t\t\t\t                                        \t\t\t\t\t\t\t\t\t\t\t   *\n  // *********************************************************************************************\n\n}\n","export class Easing {\n\n  public static linear(t: number, b: number, c: number, d: number): number {\n    return c * t / d + b;\n  }\n\n  public static easeInQuad(t: number, b: number, c: number, d: number): number {\n    return c * (t /= d) * t + b;\n  }\n\n  public static easeOutQuad(t: number, b: number, c: number, d: number): number {\n    return -c * (t /= d) * (t - 2) + b;\n  }\n\n\n  public static easeInOutQuad(t: number, b: number, c: number, d: number): number {\n    if ((t /= d / 2) < 1) {\n      return c / 2 * t * t + b;\n    } else {\n      return -c / 2 * ((--t) * (t - 2) - 1) + b;\n    }\n  }\n\n  public static easeInCubic(t: number, b: number, c: number, d: number): number {\n    return c * (t /= d) * t * t + b;\n  }\n\n  public static easeOutCubic(t: number, b: number, c: number, d: number): number {\n    return c * ((t = t / d - 1) * t * t + 1) + b;\n  }\n\n  public static easeInOutCubic(t: number, b: number, c: number, d: number): number {\n    if ((t /= d / 2) < 1) {\n      return c / 2 * t * t * t + b;\n    } else {\n      return c / 2 * ((t -= 2) * t * t + 2) + b;\n    }\n  }\n\n  public static easeInQuart(t: number, b: number, c: number, d: number): number {\n    return c * (t /= d) * t * t * t + b;\n  }\n\n  public static easeOutQuart(t: number, b: number, c: number, d: number): number {\n    return -c * ((t = t / d - 1) * t * t * t - 1) + b;\n  }\n\n  public static easeInOutQuart(t: number, b: number, c: number, d: number): number {\n    if ((t /= d / 2) < 1) {\n      return c / 2 * t * t * t * t + b;\n    } else {\n      return -c / 2 * ((t -= 2) * t * t * t - 2) + b;\n    }\n  }\n\n  public static easeInQuint(t: number, b: number, c: number, d: number): number {\n    return c * (t /= d) * t * t * t * t + b;\n  }\n\n  public static easeOutQuint(t: number, b: number, c: number, d: number): number {\n    return c * ((t = t / d - 1) * t * t * t * t + 1) + b;\n  }\n\n  public static easeInOutQuint(t: number, b: number, c: number, d: number): number {\n    if ((t /= d / 2) < 1) {\n      return c / 2 * t * t * t * t * t + b;\n    } else {\n      return c / 2 * ((t -= 2) * t * t * t * t + 2) + b;\n    }\n  }\n\n  public static easeInSine(t: number, b: number, c: number, d: number): number {\n    return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;\n  }\n\n  public static easeOutSine(t: number, b: number, c: number, d: number): number {\n    return c * Math.sin(t / d * (Math.PI / 2)) + b;\n  }\n\n  public static easeInOutSine(t: number, b: number, c: number, d: number): number {\n    return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;\n  }\n\n  public static easeInExpo(t: number, b: number, c: number, d: number): number {\n    if (t === 0) {\n      return b;\n    } else {\n      return c * Math.pow(2, 10 * (t / d - 1)) + b;\n    }\n  }\n\n  public static easeOutExpo(t: number, b: number, c: number, d: number): number {\n    if (t === d) {\n      return b + c;\n    } else {\n      return c * (-Math.pow(2, -10 * t / d) + 1) + b;\n    }\n  }\n\n  public static easeInOutExpo(t: number, b: number, c: number, d: number): number {\n    if (t === 0) {\n      b;\n    }\n    if (t === d) {\n      b + c;\n    }\n    if ((t /= d / 2) < 1) {\n      return c / 2 * Math.pow(2, 10 * (t - 1)) + b;\n    } else {\n      return c / 2 * (-Math.pow(2, -10 * --t) + 2) + b;\n    }\n  }\n\n  public static easeInCirc(t: number, b: number, c: number, d: number): number {\n    return -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;\n  }\n\n  public static easeOutCirc(t: number, b: number, c: number, d: number): number {\n    return c * Math.sqrt(1 - (t = t / d - 1) * t) + b;\n  }\n\n  public static easeInOutCirc(t: number, b: number, c: number, d: number): number {\n    if ((t /= d / 2) < 1) {\n      return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b;\n    } else {\n      return c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;\n    }\n  }\n\n  public static easeInElastic(t: number, b: number, c: number, d: number): number {\n    let a: number, p: number, s: number;\n    s = 1.70158;\n    p = 0;\n    a = c;\n    if (t === 0) {\n      b;\n    } else if ((t /= d) === 1) {\n      b + c;\n    }\n    if (!p) {\n      p = d * .3;\n    }\n    if (a < Math.abs(c)) {\n      a = c;\n      s = p / 4;\n    } else {\n      s = p / (2 * Math.PI) * Math.asin(c / a);\n    }\n    return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;\n  }\n\n  public static easeOutElastic(t: number, b: number, c: number, d: number): number {\n    let a: number, p: number, s: number;\n    s = 1.70158;\n    p = 0;\n    a = c;\n    if (t === 0) {\n      b;\n    } else if ((t /= d) === 1) {\n      b + c;\n    }\n    if (!p) {\n      p = d * .3;\n    }\n    if (a < Math.abs(c)) {\n      a = c;\n      s = p / 4;\n    } else {\n      s = p / (2 * Math.PI) * Math.asin(c / a);\n    }\n    return a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c + b;\n  }\n\n  public static easeInOutElastic(t: number, b: number, c: number, d: number): number {\n    let a: number, p: number, s: number;\n    s = 1.70158;\n    p = 0;\n    a = c;\n    if (t === 0) {\n      b;\n    } else if ((t /= d / 2) === 2) {\n      b + c;\n    }\n    if (!p) {\n      p = d * (.3 * 1.5);\n    }\n    if (a < Math.abs(c)) {\n      a = c;\n      s = p / 4;\n    } else {\n      s = p / (2 * Math.PI) * Math.asin(c / a);\n    }\n    if (t < 1) {\n      return -.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;\n    } else {\n      return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p) * .5 + c + b;\n    }\n  }\n\n  public static easeInBack(t: number, b: number, c: number, d: number, s: number): number {\n    if (s === void 0) {\n      s = 1.70158;\n    }\n    return c * (t /= d) * t * ((s + 1) * t - s) + b;\n  }\n\n  public static easeOutBack(t: number, b: number, c: number, d: number, s: number): number {\n    if (s === void 0) {\n      s = 1.70158;\n    }\n    return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;\n  }\n\n  public static easeInOutBack(t: number, b: number, c: number, d: number, s: number): number {\n    if (s === void 0) {\n      s = 1.70158;\n    }\n    if ((t /= d / 2) < 1) {\n      return c / 2 * (t * t * (((s *= 1.525) + 1) * t - s)) + b;\n    } else {\n      return c / 2 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2) + b;\n    }\n  }\n\n  public static easeInBounce(t: number, b: number, c: number, d: number): number {\n    let v: number;\n    v = Easing.easeOutBounce(d - t, 0, c, d);\n    return c - v + b;\n  }\n\n  public static easeOutBounce(t: number, b: number, c: number, d: number): number {\n    if ((t /= d) < 1 / 2.75) {\n      return c * (7.5625 * t * t) + b;\n    } else if (t < 2 / 2.75) {\n      return c * (7.5625 * (t -= 1.5 / 2.75) * t + .75) + b;\n    } else if (t < 2.5 / 2.75) {\n      return c * (7.5625 * (t -= 2.25 / 2.75) * t + .9375) + b;\n    } else {\n      return c * (7.5625 * (t -= 2.625 / 2.75) * t + .984375) + b;\n    }\n  }\n\n  public static easeInOutBounce(t: number, b: number, c: number, d: number): number {\n    let v: number;\n    if (t < d / 2) {\n      v = Easing.easeInBounce(t * 2, 0, c, d);\n      return v * .5 + b;\n    } else {\n      v = Easing.easeOutBounce(t * 2 - d, 0, c, d);\n      return v * .5 + c * .5 + b;\n    }\n  }\n}\n","/// <reference types=\"pixi.js\" />\n\nimport * as PIXI from \"pixi.js\";\nimport { Node } from \"./util/LinkedList\";\nimport { IParticle, IParticleSettings, FX, IParticleEmitterParent } from \"./FX\";\nimport { Sprite } from \"./Sprite\";\nimport { ParticleEmitter } from \"./ParticleEmitter\";\nimport { Color } from \"./util/Color\";\nimport { Easing } from \"./util/Easing\";\nimport { Rnd } from \"./util/Rnd\";\nimport { MovieClip } from \"./MovieClip\";\nimport { FXSignal } from \"./util/FXSignal\";\n\nexport interface IParticleSignals {\n    died: FXSignal;\n    bounced: FXSignal;\n    updated: FXSignal;\n}\n\n\nexport class Particle extends Node implements IParticle, IParticleEmitterParent {\n\n    public component: Sprite | MovieClip;\n    public duration: number;\n\n    public distance: number;\n    public startX: number;\n    public startY: number;\n    public deltaX: number;\n    public deltaY: number;\n    public distanceEase: Function;\n\n    public useFadeIn: boolean;\n    public fadeInEase: Function;\n    public fadeInDuration: number;\n\n    public alphaStart: number;\n    public alphaDelta: number;\n    public alphaEase: Function;\n    public alphaDuration: number;\n\n    public useTint: boolean;\n    public tintStart: number;\n    public tintEnd: number;\n    public tintEase: Function;\n\n    public useMotion: boolean;\n    public useScale: boolean;\n    public useAlpha: boolean;\n    public useSpawns: boolean;\n    public useChilds: boolean;\n\n    public uniformScale: boolean;\n\n    public useScaleIn: boolean;\n    public scaleInEase: Function;\n    public scaleInDuration: number;\n\n    public scaleStart: number;\n    public scaleDelta: number;\n    public scaleEase: Function;\n    public scaleDuration: number;\n\n    public scaleXStart: number;\n    public scaleXDelta: number;\n    public scaleXEase: Function;\n    public scaleXDuration: number;\n\n    public scaleYStart: number;\n    public scaleYDelta: number;\n    public scaleYEase: Function;\n    public scaleYDuration: number;\n\n    public useRotation: boolean;\n    public rotationSpeed: number;\n    public rotationEnd: number;\n\n    public useGravity: boolean;\n    public gravity: number;\n    public moveSpeedX: number;\n    public moveSpeedY: number;\n    public useFloor: boolean;\n    public floorY: number;\n    public bounceFac: number;\n    public friction: number;\n    public useAlign: boolean;\n\n    public dx: number = 0;\n    public dy: number = 0;\n\n    public emitter: ParticleEmitter;\n\n    public settings: IParticleSettings;\n\n    public componentId: string;\n\n    public time: number;\n\n    private _color: Color;\n    private _dt: number;\n\n    private _spawnOnBounce: Boolean;\n\n    private _childEmitters: ParticleEmitter[] = [];\n    private _hasChildEmitters: boolean = false;\n    private _spawnOnHalfway: boolean = false;\n\n    public __recycled: boolean = true;\n    public __fx: FX;\n    public __parent: IParticleEmitterParent;\n    public __on: IParticleSignals = {\n        died: new FXSignal(),\n        bounced: new FXSignal(),\n        updated: new FXSignal()\n    };\n\n    constructor() {\n        super();\n        this._color = new Color();\n    }\n\n    // *********************************************************************************************\n    // * Public\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                                        \t\t\t\t   *\n    // *********************************************************************************************\n\n    public init(emitter: ParticleEmitter, settings: IParticleSettings, scaleMod?: number): IParticle {\n\n        const component = this.component;\n        const fx = this.__fx;\n\n        this.emitter = emitter;\n        this.settings = settings;\n        const duration = this.duration = Rnd.float(settings.durationMin, settings.durationMax) * scaleMod;\n\n        this._dt = 1 / this.duration;\n        this.time = 0;\n        this.__recycled = false;\n\n        settings.addOnTop ? emitter.container.addChild(component) : emitter.container.addChildAt(component, 0);\n\n        component.blendMode = fx.useBlendModes ? (settings.blendMode) : 0;\n\n        this.startX = component.x;\n        this.startY = component.y;\n\n        this.useGravity = emitter.settings.useGravity;\n        this.useScale = settings.useScale;\n        this.useRotation = settings.useRotation;\n        this.useAlpha = settings.useAlpha;\n        this.useTint = settings.useTint;\n        this.useSpawns = settings.useSpawns;\n        this.useChilds = settings.useChilds;\n        this.useMotion = settings.useMotion;\n\n        if (this.useGravity) {\n            this.gravity = emitter.settings.gravity;\n            this.useFloor = emitter.settings.useFloor;\n            this.floorY = emitter.settings.floorY;\n            this.bounceFac = Rnd.float(settings.bounceFacMin, settings.bounceFacMax) * scaleMod;\n            this.friction = 1 - Rnd.float(settings.frictionMin, settings.frictionMax) * scaleMod;\n            this._spawnOnBounce = settings.spawn.onBounce.length > 0;\n            this.useAlign = settings.align;\n            if (settings.useMotion) {\n                const speed = Rnd.float(settings.moveSpeedMin, settings.moveSpeedMax);\n                this.moveSpeedX = speed * this.dx * scaleMod;\n                this.moveSpeedY = speed * this.dy * scaleMod;\n            } else {\n                this.moveSpeedX = this.moveSpeedY = 0;\n            }\n\n        } else {\n            if (settings.useMotion) {\n                const d = this.distance = Rnd.integer(settings.distanceMin, settings.distanceMax) * 0.8 * scaleMod;\n                this.deltaX = ((component.x + d * this.dx) - this.startX) * 0.8;\n                this.deltaY = ((component.y + d * this.dy) - this.startY) * 0.8;\n                this.distanceEase = (Easing as any)[settings.distanceEase];\n                this.useAlign = false;\n            } else {\n                component.x = this.startX;\n                component.y = this.startY;\n            }\n        }\n\n\n        if (settings.useRotation && settings.randomStartRotation && !this.useAlign) {\n            component.rotation = Rnd.float(0, 6.28319);\n        }\n\n        if (settings.useAlpha) {\n            this.alphaStart = component.alpha = Rnd.float(settings.alphaStartMin, settings.alphaStartMax);\n            this.alphaDelta = Rnd.float(settings.alphaEndMin, settings.alphaEndMax) - this.alphaStart;\n            this.alphaEase = (Easing as any)[settings.alphaEase] || null;\n\n            this.useFadeIn = settings.fadeIn;\n            if (settings.fadeIn) {\n                this.alphaDuration = duration * (1 - settings.fadeInDurationFac);\n                this.fadeInDuration = duration * settings.fadeInDurationFac;\n                this.fadeInEase = (Easing as any)[settings.fadeInEase || 'easeInSine'];\n            }\n        }\n\n\n        if (settings.useScale) {\n            this.uniformScale = settings.uniformScale;\n            this.useScaleIn = settings.scaleIn;\n\n            if (settings.useScale) {\n                this.uniformScale = settings.uniformScale;\n                this.scaleEase = (Easing as any)[settings.scaleEase];\n\n                if (settings.uniformScale) {\n                    this.scaleStart = component.scale.x = component.scale.y = Rnd.float(settings.scaleStartMin, settings.scaleStartMax) * scaleMod;\n                    this.scaleDelta = (Rnd.float(settings.scaleEndMin, settings.scaleEndMax) - this.scaleStart) * scaleMod;\n                } else {\n                    this.scaleXStart = component.scale.x = Rnd.float(settings.scaleXStartMin, settings.scaleXStartMax) * scaleMod;\n                    this.scaleXDelta = (Rnd.float(settings.scaleXEndMin, settings.scaleXEndMax) - this.scaleXStart) * scaleMod;\n                    this.scaleXEase = (Easing as any)[settings.scaleXEase];\n                    this.scaleYStart = component.scale.y = Rnd.float(settings.scaleYStartMin, settings.scaleYStartMax) * scaleMod;\n                    this.scaleYDelta = (Rnd.float(settings.scaleYEndMin, settings.scaleYEndMax) - this.scaleYStart) * scaleMod;\n                    this.scaleYEase = (Easing as any)[settings.scaleYEase];\n                }\n\n                if (settings.scaleIn) {\n                    this.scaleDuration = duration * (1 - settings.scaleInDurationFac);\n                    this.scaleInDuration = duration * settings.scaleInDurationFac;\n                    this.scaleInEase = (Easing as any)[settings.scaleInEase || 'easeInSine'];\n                }\n\n            } else {\n                if (settings.uniformScale) {\n                    component.scale.x = settings.scaleStartMin;\n                    component.scale.y = settings.scaleStartMin;\n                } else {\n                    component.scale.x = settings.scaleXStartMin;\n                    component.scale.y = settings.scaleYStartMin;\n                }\n            }\n        }\n\n\n        if (settings.useRotation) {\n            this.rotationSpeed = Rnd.float(settings.rotationSpeedMin, settings.rotationSpeedMax) * scaleMod;\n            if (settings.randomRotationDirection) this.rotationSpeed *= Rnd.sign();\n        }\n\n        if (settings.useTint) {\n            this.tintEase = (Easing as any)[settings.tintEase];\n            this._color.setRgb(settings.tintStart, settings.tintEnd);\n        }\n\n        if (settings.useChilds) {\n            this._childEmitters.length = 0;\n            let l = settings.childs.length;\n            this._hasChildEmitters = l > 0;\n            if (this._childEmitters) {\n                while (--l > -1) {\n                    const def = settings.childs[l];\n                    const em = fx.getParticleEmitterById(def.id);\n                    em.init(emitter.container, true, (def.scale || 1) * (scaleMod || 1));\n                    if (def.adoptRotation) {\n                        em.rotation = component.rotation;\n                        em.__adoptRotation = true;\n                    }\n                    em.__parent = this;\n                    this._childEmitters.push(em);\n                }\n            }\n        }\n\n        if (settings.useSpawns) {\n\n            if (settings.spawn.onStart.length > 0) {\n                emitter.__subSpawn(this, settings.spawn.onStart);\n            }\n            this._spawnOnHalfway = settings.spawn.onHalfway.length > 0;\n        }\n\n        if (emitter.__on.particleSpawned.__hasCallback) {\n            emitter.__on.particleSpawned.dispatch(this);\n        }\n\n        return this;\n    }\n\n    public update(dt: number) {\n\n        const t = this.time += dt;\n        const duration = this.duration;\n\n        if (t >= duration) {\n            this.emitter.__removeParticle(this);\n            return;\n        }\n\n        const component = this.component;\n        const mod = t * dt;\n\n        //Motion\n        if (this.useGravity) {\n            const dt2 = dt / 0.0166666;\n            component.x += this.moveSpeedX * dt2;\n            component.y += this.moveSpeedY * dt2;\n            this.moveSpeedY += this.gravity * dt2;\n\n            if (this.useAlign) {\n                component.rotation = Math.atan2(this.moveSpeedY, this.moveSpeedX);\n            }\n\n            if (this.useFloor && this.floorY > 0) {\n                if (component.y > this.floorY) {\n                    component.y = this.floorY;\n                    this.moveSpeedY *= -this.bounceFac;\n                    this.moveSpeedX *= this.friction;\n\n                    if (this.useSpawns && this._spawnOnBounce) {\n                        this.emitter.__subSpawn(this, this.settings.spawn.onBounce);\n                    }\n\n                    const emitter = this.emitter;\n                    if (emitter.__on.particleBounced.__hasCallback) {\n                        emitter.__on.particleBounced.dispatch(this);\n                    }\n                    if (this.__on.bounced.__hasCallback) {\n                        this.__on.bounced.dispatch(this);\n                    }\n\n                    if (this.settings.stopOnBounce) {\n                        emitter.__removeParticle(this);\n                    }\n                    return;\n                }\n            }\n        } else if (this.useMotion) {\n            if (this.distanceEase) {\n                component.x = this.distanceEase(t, this.startX, this.deltaX, duration);\n                component.y = this.distanceEase(t, this.startY, this.deltaY, duration);\n            } else {\n                component.x = this.deltaX * mod + this.startX;\n                component.y = this.deltaY * mod + this.startY;\n            }\n        }\n\n        //Alpha\n        if (this.useAlpha) {\n            if (this.useFadeIn) {\n                if (t < this.fadeInDuration) {\n                    component.alpha = this.fadeInEase(t, 0, this.alphaStart, this.fadeInDuration);\n                } else {\n                    component.alpha = this.alphaEase(t - this.fadeInDuration, this.alphaStart, this.alphaDelta, this.alphaDuration);\n                }\n            } else {\n                if (this.alphaEase) {\n                    component.alpha = this.alphaEase(t, this.alphaStart, this.alphaDelta, duration)\n                } else {\n                    component.alpha = (this.alphaDelta) * mod + this.alphaStart;\n                }\n            }\n        }\n\n        //Rotation\n        if (this.useRotation) {\n            component.rotation += this.rotationSpeed;\n        }\n\n        //Scale\n        if (this.useScale) {\n            if (this.uniformScale) {\n                if (this.useScaleIn) {\n                    if (t < this.scaleInDuration) {\n                        component.scale.x = component.scale.y = this.scaleInEase(t, 0, this.scaleStart, this.scaleInDuration);\n                    } else {\n                        component.scale.x = component.scale.y = this.scaleEase(t - this.scaleInDuration, this.scaleStart, this.scaleDelta, this.scaleDuration);\n                    }\n                } else {\n                    if (this.scaleEase) {\n                        component.scale.x = this.scaleEase(t, this.scaleStart, this.scaleDelta, duration);\n                        component.scale.y = this.scaleEase(t, this.scaleStart, this.scaleDelta, duration)\n                    } else {\n                        component.scale.x = component.scale.y = this.scaleDelta * mod + this.scaleStart;\n                    }\n                }\n            } else {\n                if (this.useScaleIn) {\n                    if (t < this.scaleInDuration) {\n                        component.scale.x = this.scaleInEase(t, 0, this.scaleXStart, this.scaleInDuration);\n                        component.scale.y = this.scaleInEase(t, 0, this.scaleYStart, this.scaleInDuration);\n                    } else {\n                        component.scale.x = this.scaleEase(t - this.scaleInDuration, this.scaleXStart, this.scaleXDelta, this.scaleDuration);\n                        component.scale.y = this.scaleEase(t - this.scaleInDuration, this.scaleYStart, this.scaleYDelta, this.scaleDuration);\n                    }\n                } else {\n                    if (this.scaleXEase) {\n                        component.scale.x = this.scaleXEase(t, this.scaleXStart, this.scaleXDelta, duration);\n                    } else {\n                        component.scale.x = this.scaleXDelta * mod + this.scaleXStart;\n                    }\n                    if (this.scaleYEase) {\n                        component.scale.y = this.scaleYEase(t, this.scaleYStart, this.scaleYDelta, duration);\n                    } else {\n                        component.scale.y = this.scaleYDelta * mod + this.scaleYStart;\n                    }\n                }\n            }\n\n\n        }\n\n        //Tint\n        if (this.useTint) {\n            component.tint = this._color.tween(this.tintEase, t, duration);\n        }\n\n        //Spawn t = 0.5\n        if (this._spawnOnHalfway) {\n            if (t >= 0.5) {\n                this._spawnOnHalfway = false;\n                this.emitter.__subSpawn(this, this.settings.spawn.onHalfway);\n            }\n        }\n\n        if (this.useChilds && this._hasChildEmitters) {\n            const childs = this._childEmitters;\n            let l = childs.length;\n            while (--l > -1) {\n                const child = childs[l];\n                if (child.__recycled) continue;\n                child.x = component.position.x;\n                child.y = component.position.y;\n                if (child.__adoptRotation) {\n                    child.rotation = component.rotation;\n                }\n            }\n        }\n\n        if (this.emitter.__on.particleUpdated.__hasCallback) {\n            this.emitter.__on.particleUpdated.dispatch(this);\n        }\n        if (this.__on.updated.__hasCallback) {\n            this.__on.updated.dispatch(this);\n        }\n    }\n\n    public stop() {\n        this.time = this.duration;\n    }\n\n    public recycle() {\n\n        if (this.emitter.__on.particleDied.__hasCallback) {\n            this.emitter.__on.particleDied.dispatch(this);\n        }\n\n        const on = this.__on;\n        if (on.died.__hasCallback) {\n            on.died.dispatch(this);\n            on.died.removeAll();\n        }\n        if (on.updated.__hasCallback) {\n            on.updated.removeAll();\n        }\n        if (on.bounced.__hasCallback) {\n            on.bounced.removeAll();\n        }\n\n        if (this._hasChildEmitters) {\n            const childs = this._childEmitters;\n            let l = childs.length;\n            while (--l > -1) {\n                childs[l].stop(true);\n            }\n            this._childEmitters.length = 0;\n            this._hasChildEmitters = false;\n        }\n\n\n        this.component.recycle();\n        this.__fx.__recycleParticle(this);\n        this.dx = this.dy = this.deltaX = this.deltaY = 0;\n\n        this.component = null;\n        this.emitter = null;\n        this.settings = null;\n\n        this.__recycled = true;\n\n    }\n\n    public dispose() {\n        this.recycle();\n        this.__fx = null;\n    }\n\n    public get x(): number {\n        return this.component.x;\n    }\n\n    public get y(): number {\n        return this.component.y;\n    }\n\n    public get on(): IParticleSignals {\n        return this.__on;\n    }\n\n\n    // *********************************************************************************************\n    // * Internal\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                                        \t\t\t\t   *\n    // *********************************************************************************************\n\n    public __removeChildEmitter(emitter: ParticleEmitter) {\n        const index = this._childEmitters.indexOf(emitter);\n        if (index > -1) {\n            this._childEmitters.splice(index, 1);\n            if (this._childEmitters.length == 0) this._hasChildEmitters = false;\n        }\n    }\n\n}\n","import {FX} from \"./FX\";\n\nexport class Sanitizer {\n\n    public static sanitizeBundle(bundle: any) {\n\n        for (let emitter of bundle.emitters) {\n            const structure = Sanitizer._presetStructure.emitter;\n            Sanitizer.parse(emitter, structure,  Sanitizer._presetStructure.emitterSpawn);\n        }\n\n        for (let sequence of bundle.sequences) {\n            const structure = Sanitizer._presetStructure.sequence;\n            Sanitizer.parse(sequence, structure,  Sanitizer._presetStructure.sequenceEffect);\n        }\n    }\n\n    private static parse(bundleObject: any, structureObject: any, spawnStructureObject:any) {\n        for (let propName in structureObject) {\n            if (bundleObject[propName] == null) {\n                bundleObject[propName] = structureObject[propName];\n            } else {\n                const bundleProp = bundleObject[propName];\n\n                if (typeof bundleProp !== 'object') continue;\n\n                const structureProp = structureObject[propName];\n                if (!bundleProp.hasOwnProperty('length')) {\n                    Sanitizer.parse(bundleProp, structureProp, spawnStructureObject);\n                } else {\n                    for (let spawn of bundleProp) {\n                        for (let spawnPropName in spawnStructureObject) {\n                            if (spawn[spawnPropName] == null) {\n                                spawn[spawnPropName] = spawnStructureObject[spawnPropName];\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    private static _presetStructure: any = {\n        sequence: {\n            id: 0,\n            name: '',\n            type: 1,\n            delay: 0,\n            scaleMin: 1,\n            scaleMax: 1,\n            effects: []\n        },\n        sequenceEffect: {\n            id: 0,\n            componentId: null,\n            componentType: 0,\n            delay: 0,\n            componentParams: {\n                animationSpeedMin: 1,\n                animationSpeedMax: 1,\n                anchorX: 0.5,\n                anchorY: 0.5,\n                loop: false\n            },\n            scaleMin: 1,\n            scaleMax: 1,\n            alphaMin: 1,\n            alphaMax: 1,\n            rotationMin: 0,\n            rotationMax: 0,\n            blendMode: 0,\n            duration: 0.1,\n            tint: 0xffffff,\n            containerId: '',\n            triggerValue: ''\n        },\n        emitter: {\n            id: 0,\n            name: '',\n            type: 0,\n            core: {\n                type: 'circle',\n                params: {\n                    radius: 100,\n                    radial: true,\n                    angle: 6.28318530718,\n                    uniform: false,\n                    width: 100,\n                    height: 100\n                }\n            },\n            spawnFrequencyMin: 0.1,\n            spawnFrequencyMax: 0.1,\n            maxParticles: 1000,\n            spawnCountMin: 1,\n            spawnCountMax: 1,\n            duration: 0,\n            infinite: true,\n            useGravity: false,\n            gravity: 0,\n            useFloor: false,\n            floorY: 700,\n            rotation: 0,\n            autoRotation: 0,\n            particleSettings: {\n                componentType: 0,\n                componentId: '',\n                componentParams: {\n                    animationSpeedMin: 1,\n                    animationSpeedMax: 1,\n                    anchorX: 0.5,\n                    anchorY: 0.5,\n                    loop: false\n                },\n                durationMin: 1,\n                durationMax: 2,\n                distanceMin: 0,\n                distanceMax: 0,\n                distanceEase: 'linear',\n                moveSpeedMin: 0,\n                moveSpeedMax: 0,\n                bounceFacMin: 0,\n                bounceFacMax: 0,\n                frictionMin: 0,\n                frictionMax: 0,\n                useMotion: false,\n                useRotation: false,\n                useAlpha: false,\n                useScale: false,\n                useTint: false,\n                useChilds: false,\n                useSpawns: false,\n                stopOnBounce: false,\n                align: false,\n                blendMode: 1,\n                addOnTop: true,\n                rotationSpeedMin: 0,\n                rotationSpeedMax: 0,\n                randomRotationDirection: false,\n                randomStartRotation: false,\n                fadeIn: true,\n                fadeInDurationFac: 0.1,\n                fadeInEase: 'linear',\n                alphaStartMin: 0.7,\n                alphaStartMax: 0.9,\n                alphaEndMin: 0.7,\n                alphaEndMax: 0.8,\n                alphaEase: 'linear',\n                tintStart: 0xffffff,\n                tintEnd: 0xffffff,\n                tintEase: 'linear',\n                scaleIn: false,\n                scaleInDurationFac: 0.2,\n                scaleInEase: 'linear',\n                uniformScale: true,\n                scaleXStartMin: 1,\n                scaleXStartMax: 1,\n                scaleXEndMin: 1,\n                scaleXEndMax: 1,\n                scaleXEase: 'linear',\n                scaleYStartMin: 1,\n                scaleYStartMax: 1,\n                scaleYEndMin: 1,\n                scaleYEndMax: 1,\n                scaleYEase: 'linear',\n                scaleStartMin: 1,\n                scaleStartMax: 1,\n                scaleEndMin: 1,\n                scaleEndMax: 1,\n                scaleEase: 'linear',\n                childs: [],\n                spawn: {\n                    onComplete: [],\n                    onBounce: [],\n                    onHalfway: [],\n                    onStart: []\n                }\n            },\n            childs: []\n        },\n        emitterSpawn: {\n            type: 0,\n            id: 0,\n            scale: 1,\n            adoptRotation: true,\n            containerId: ''\n        }\n    };\n}","/// <reference types=\"pixi.js\" />\n\nimport { FX } from \"./FX\";\nimport * as PIXI from 'pixi.js';\n\nexport class Sprite extends PIXI.Sprite {\n\n    public __sequenceEndTime: number;\n    public __fx: FX;\n\n    constructor(public componentId: string, texture: string, anchorX?: number, anchorY?: number) {\n        super(PIXI.Texture.from(texture));\n        this.anchor.set(anchorX || 0.5, anchorY || 0.5);\n        this.__sequenceEndTime = null;\n    }\n\n    // *********************************************************************************************\n    // * Public\t\t\t\t\t\t\t\t\t\t                                        \t\t\t\t\t\t\t\t\t\t\t   *\n    // *********************************************************************************************\n    public recycle() {\n        this.tint = 0xffffff;\n        this.alpha = 1;\n        this.rotation = 0;\n        this.scale.set(1);\n        if (this.parent) this.parent.removeChild(this);\n        this.__fx.__recycleSprite(this.componentId, this);\n    }\n\n    public dispose() {\n        this.__fx = null;\n        this.recycle();\n        // @ts-ignore\n        this.destroy(false);\n    }\n\n    // *********************************************************************************************\n    // * Private\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                                        \t\t   *\n    // *********************************************************************************************\n\n    // *********************************************************************************************\n    // * Events\t\t\t                                        \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   *\n    // *********************************************************************************************\n\n}\n","import { Particle } from \"../Particle\";\nimport { IBoxCoreParams, ICircleCoreParams, IRingCoreParams } from \"../FX\";\nimport { ParticleEmitter } from \"../ParticleEmitter\";\n\nexport class BaseEmitterCore {\n\n    public x: number;\n    public y: number;\n    public emitter: ParticleEmitter;\n\n    protected _settings: ICircleCoreParams | IBoxCoreParams | IRingCoreParams;\n    protected _posInterpolationStep: number;\n    protected _dx: number = 0;\n    protected _dy: number = 0;\n    protected _rotation: number = 0;\n    protected _t: number;\n\n    public __x: number;\n    public __y: number;\n    public __scaleMod: number;\n\n    public static __TYPE_BOX: string = 'box';\n    public static __TYPE_CIRCLE: string = 'circle';\n    public static __TYPE_RING: string = 'ring';\n\n\n    constructor(public type: string) {\n\n    }\n\n    // *********************************************************************************************\n    // * Public\t\t\t                                        \t\t\t\t\t\t\t\t   *\n    // *********************************************************************************************\n    public init(emitter: ParticleEmitter) {\n        this.emitter = emitter;\n        this._settings = emitter.settings.core.params;\n        this.x = this.__x = emitter.x;\n        this.y = this.__y = emitter.y;\n        this.rotation = emitter.rotation;\n    }\n\n    public emit(particle: Particle) {\n\n    }\n\n    public prepare(spawnCount: number) {\n        this._posInterpolationStep = 1 / spawnCount;\n        this._t = this._posInterpolationStep * 0.5;\n    }\n\n    public step() {\n        this.__x = this.x;\n        this.__y = this.y;\n    }\n\n    public recycle() {\n        this.emitter = null;\n        this._settings = null;\n\n    }\n\n    public dispose() {\n        this.recycle();\n        this.emitter = null;\n        this._settings = null;\n    }\n\n    public get rotation(): number {\n        return this._rotation;\n    }\n\n    public set rotation(value: number) {\n        this._rotation = value;\n        this._dx = Math.cos(value);\n        this._dy = Math.sin(value);\n    }\n\n    // *********************************************************************************************\n    // * Private\t\t\t\t\t\t\t\t                                        \t\t\t\t\t\t\t\t\t\t\t\t   *\n    // *********************************************************************************************\n\n    // *********************************************************************************************\n    // * Events\t\t\t\t\t\t\t\t                                        \t\t\t\t\t\t\t\t\t\t\t\t\t   *\n    // *********************************************************************************************\n\n}\n","/// <reference types=\"pixi.js\" />\n\nimport * as PIXI from \"pixi.js\";\nimport { IBoxCoreParams } from \"../FX\";\nimport { Particle } from \"../Particle\";\nimport { ParticleEmitter } from \"../ParticleEmitter\";\nimport { BaseEmitterCore } from \"./BaseEmitterCore\";\nimport { Rnd } from \"../util/Rnd\";\n\n\nexport class BoxEmitterCore extends BaseEmitterCore {\n\n    constructor() {\n        super(BaseEmitterCore.__TYPE_BOX);\n    }\n\n    // *********************************************************************************************\n    // * Public\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   *\n    // *********************************************************************************************\n\n    public emit(particle: Particle) {\n\n        const settings = <IBoxCoreParams>this._settings;\n        const emitter = this.emitter;\n\n        const w2 = settings.width * 0.5 * this.__scaleMod;\n        const h2 = settings.height * 0.5 * this.__scaleMod;\n\n        let angle = emitter.rotation;\n\n        const x = Rnd.float(-w2, w2);\n        const y = Rnd.float(-h2, h2);\n\n        if (angle != 0) {\n            particle.component.x = (this.__x + this._t * (this.x - this.__x)) + x * Math.cos(angle) - y * Math.sin(angle);\n            particle.component.y = (this.__y + this._t * (this.y - this.__y)) + x * Math.sin(angle) + y * Math.cos(angle);\n        } else {\n            particle.component.x = this.__x + this._t * (this.x - this.__x) + x;\n            particle.component.y = this.__y + this._t * (this.y - this.__y) + y;\n        }\n\n        if (settings.radial) {\n            angle += Math.atan2(y, x);\n            particle.dx = Math.cos(angle);\n            particle.dy = Math.sin(angle);\n        } else {\n            particle.dx = this._dx;\n            particle.dy = this._dy;\n        }\n\n        particle.component.rotation = angle;\n\n        this._t += this._posInterpolationStep;\n\n    }\n\n    // *********************************************************************************************\n    // * Private\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                                        \t\t   *\n    // *********************************************************************************************\n\n    // *********************************************************************************************\n    // * Events\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                                        \t\t\t\t\t   *\n    // *********************************************************************************************\n\n\n}\n","/// <reference types=\"pixi.js\" />\n\nimport * as PIXI from \"pixi.js\";\nimport { ICircleCoreParams, FX } from \"../FX\";\nimport { Particle } from \"../Particle\";\nimport { ParticleEmitter } from \"../ParticleEmitter\";\nimport { BaseEmitterCore } from \"./BaseEmitterCore\";\nimport { Rnd } from \"../util/Rnd\";\n\nexport class CircleEmitterCore extends BaseEmitterCore {\n\n    constructor() {\n        super(BaseEmitterCore.__TYPE_CIRCLE);\n    }\n\n    // *********************************************************************************************\n    // * Public\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                   *\n    // *********************************************************************************************\n\n    public emit(particle: Particle) {\n\n        const settings = <ICircleCoreParams>this._settings;\n        const emitter = this.emitter;\n\n        let angle;\n        if (!settings.angle) {\n            angle = Rnd.float(0, 6.28319) + emitter.rotation;\n        } else {\n            angle = Rnd.float(-settings.angle * 0.5, settings.angle * 0.5) + emitter.rotation;\n        }\n\n        if (settings.radius > 0) {\n            let r = Rnd.float(0, settings.radius) * this.__scaleMod;\n            particle.component.x = (this.__x + this._t * (this.x - this.__x)) + Math.cos(angle) * r;\n            particle.component.y = (this.__y + this._t * (this.y - this.__y)) + Math.sin(angle) * r;\n        } else {\n            particle.component.x = this.__x + this._t * (this.x - this.__x);\n            particle.component.y = this.__y + this._t * (this.y - this.__y);\n        }\n\n        if (settings.radial) {\n            particle.dx = Math.cos(angle);\n            particle.dy = Math.sin(angle);\n            particle.component.rotation = angle;\n        } else {\n            particle.dx = this._dx;\n            particle.dy = this._dy;\n            particle.component.rotation = emitter.rotation;\n        }\n\n        this._t += this._posInterpolationStep;\n\n    }\n\n\n    // *********************************************************************************************\n    // * Private\t\t\t\t\t\t\t\t\t                                        \t   *\n    // *********************************************************************************************\n\n    // *********************************************************************************************\n    // * Events\t\t\t\t\t\t\t                                        \t\t\t\t   *\n    // *********************************************************************************************\n\n}\n","/// <reference types=\"pixi.js\" />\n\nimport * as PIXI from \"pixi.js\";\nimport { BaseEmitterCore } from \"./BaseEmitterCore\";\nimport { ParticleEmitter } from \"../ParticleEmitter\";\nimport { Particle } from \"../Particle\";\nimport { IRingCoreParams } from \"../FX\";\nimport { Rnd } from \"../util/Rnd\";\n\nexport class RingEmitterCore extends BaseEmitterCore {\n\n    private _uniformStep: number;\n    private _angle: number;\n\n    constructor() {\n        super(BaseEmitterCore.__TYPE_RING);\n    }\n\n    // *********************************************************************************************\n    // * Public\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t               *\n    // *********************************************************************************************\n\n\n    public prepare(spawnCount: number) {\n        super.prepare(spawnCount);\n\n        const angle = (<IRingCoreParams>this._settings).angle;\n        if (2 * Math.PI - angle < 0.1) {\n            this._uniformStep = angle / (spawnCount);\n            this._angle = angle;\n        } else {\n            this._uniformStep = angle / (spawnCount - 1);\n            this._angle = -angle * 0.5;\n        }\n    }\n\n    public emit(particle: Particle) {\n\n        const settings = <IRingCoreParams>this._settings;\n        const emitter = this.emitter;\n\n        let angle;\n\n        if (settings.uniform) {\n            angle = this._angle + emitter.rotation;\n            this._angle += this._uniformStep;\n        } else {\n            angle = Rnd.float(-settings.angle * 0.5, settings.angle * 0.5) + emitter.rotation;\n        }\n\n        const r = settings.radius * this.__scaleMod;\n        particle.component.x = (this.__x + this._t * (this.x - this.__x)) + Math.cos(angle) * r;\n        particle.component.y = (this.__y + this._t * (this.y - this.__y)) + Math.sin(angle) * r;\n\n        if (settings.radial) {\n            particle.dx = Math.cos(angle);\n            particle.dy = Math.sin(angle);\n            particle.component.rotation = angle;\n        } else {\n            particle.dx = this._dx;\n            particle.dy = this._dy;\n            particle.component.rotation = emitter.rotation;\n        }\n\n        this._t += this._posInterpolationStep;\n\n    }\n\n    // *********************************************************************************************\n    // * Private\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t               *\n    // *********************************************************************************************\n\n    // *********************************************************************************************\n    // * Events\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                           *\n    // *********************************************************************************************\n\n}\n","/// <reference types=\"pixi.js\" />\n\nimport * as PIXI from \"pixi.js\";\nimport { BaseEffect } from \"./BaseEffect\";\nimport { ComponentType } from \"./ComponentType\";\nimport { EffectSequence } from \"./EffectSequence\";\nimport { EffectSequenceComponentType } from \"./EffectSequenceComponentType\";\nimport { MovieClip } from \"./MovieClip\";\nimport { Particle } from \"./Particle\";\nimport { ParticleEmitter } from \"./ParticleEmitter\";\nimport { Sanitizer } from \"./Sanitizer\";\nimport { Sprite } from \"./Sprite\";\nimport { BaseEmitterCore } from \"./core/BaseEmitterCore\";\nimport { BoxEmitterCore } from \"./core/BoxEmitterCore\";\nimport { CircleEmitterCore } from \"./core/CircleEmitterCore\";\nimport { RingEmitterCore } from \"./core/RingEmitterCore\";\nimport { LinkedList } from \"./util/LinkedList\";\n\nexport class FX {\n\n    public static settingsVersion: number = 0;\n    public static readonly version: string = '1.3.3';\n    private static _bundleHash: string = '80c6df7fb0d3d898f34ce0031c037fef';\n\n    public useBlendModes: boolean = true;\n    public particleCount: number = 0;\n    public emitterCount: number = 0;\n    public effectSequenceCount: number = 0;\n    public maxParticles: number = 5000;\n    public particleFac: number = 1;\n\n\n    private _active: boolean = false;\n    private _timeElapsed: number;\n\n    private _cache: any;\n    private _settingsCache: any;\n    private _nameMaps: any;\n\n    private _effects: LinkedList = new LinkedList();\n\n    public __containers: { [key: string]: PIXI.Container } = {};\n\n    public static ComponentType: any = ComponentType;\n    public static EffectSequenceComponentType: any = EffectSequenceComponentType;\n\n    public static __emitterCores: any = {\n        circle: CircleEmitterCore,\n        box: BoxEmitterCore,\n        ring: RingEmitterCore\n    };\n\n    constructor() {\n        this.clearCache();\n        this.start();\n    }\n\n    // *********************************************************************************************\n    // * Public\t\t\t\t\t\t\t\t\t\t                                        \t   *\n    // *********************************************************************************************\n\n    /**\n     * Starts the process.\n     *\n     * @param {} - No parameters.\n     * @return {} - No return value.\n     */\n    public start() {\n        this._active = true;\n        this._timeElapsed = Date.now();\n    }\n\n    /**\n     * Pauses the execution of the function.\n     *\n     * @param {} \n     * @return {} \n     */\n    public pause() {\n        this._active = false;\n    }\n\n    /**\n     * Updates the state of the object based on the elapsed time.\n     *\n     * @param {number} delta - The time delta to update by. Default is 1.\n     */\n    public update(delta: number = 1) {\n        if (!this.active) return;\n\n        const t = Date.now();\n        let dt = (t - this._timeElapsed) * 0.001;\n\n        dt *= delta;\n\n        const list = this._effects;\n        let node = <BaseEffect>list.first;\n        let next: BaseEffect;\n        while (node) {\n            next = <BaseEffect>node.next;\n            node.update(dt);\n            node = next;\n        }\n        this._timeElapsed = t;\n    }\n\n    /**\n     * Clears the cache by resetting all cache objects to empty values.\n     *\n     * @param {} \n     * @return {} \n     */\n    public clearCache() {\n        this._cache = {\n            particles: [],\n            mcs: [],\n            sprites: [],\n            effectSequences: [],\n            emitters: [],\n            cores: {}\n        };\n        this._settingsCache = {\n            mcs: {},\n            sprites: {},\n            emitters: {},\n            effectSequences: {}\n        };\n        this._nameMaps = {\n            emitters: {},\n            effectSequences: {}\n        };\n    }\n\n    /**\n     * Sets the value of the floorY property for all emitters in the settings cache.\n     *\n     * @param {number} value - The new value for the floorY property.\n     */\n    public setFloorY(value: number) {\n        const s = this._settingsCache.emitters;\n        for (let n in s) {\n            s[n].floorY = value;\n        }\n    }\n\n    /**\n     * Disposes of all the effects in the list and clears the cache.\n     */\n    public dispose() {\n        let list = this._effects;\n        let node = <BaseEffect>list.first;\n        while (node) {\n            node.dispose();\n            node = <BaseEffect>node.next;\n        }\n        list.clear();\n        this.clearCache();\n    }\n\n    /**\n     * Loads the bundle files and returns a promise that resolves to the parsed sprite sheet result.\n     *\n     * @param {string} bundleSettingsUrl - The URL of the bundle settings.\n     * @param {string} spritesheetUrl - The URL of the sprite sheet.\n     * @param {string} spritesheetFilter - The filter for the sprite sheet. Default is an empty string.\n     * @param {string[]} additionalAssets - An array of additional asset URLs. Default is an empty array.\n     * @return {Promise<IParseSpriteSheetResult>} A promise that resolves to the parsed sprite sheet result.\n     */\n    public loadBundleFiles(bundleSettingsUrl: string, spritesheetUrl: string, spritesheetFilter: string = '', additionalAssets: string[] = []): Promise<IParseSpriteSheetResult> {\n        return new Promise(async (resolve, reject) => {\n\n            const data: Record<string, string> =\n            {\n                'rfx_spritesheet': spritesheetUrl,\n                'rfx_bundleSettings': bundleSettingsUrl,\n            };\n\n            for (var i in additionalAssets) {\n                data[i] = additionalAssets[i];\n            }\n\n            PIXI.Assets.addBundle('rfx_assets', data);\n            const assets = await PIXI.Assets.loadBundle('rfx_assets');\n\n            resolve(this.initBundle(assets.rfx_bundleSettings));\n\n        });\n    }\n\n    /**\n     * Initializes the bundle with the given settings and optionally clears the cache.\n     *\n     * @param {any} bundleSettings - The settings for the bundle.\n     * @param {boolean} clearCache - Whether to clear the cache or not. Optional, default is false.\n     * @returns {IParseSpriteSheetResult} The result of parsing the sprite sheet.\n     */\n    public initBundle(bundleSettings: any, clearCache?: boolean): IParseSpriteSheetResult {\n        if (bundleSettings.__h !== FX._bundleHash) {\n            throw new Error('Invalid settings file.');\n        }\n\n        if (bundleSettings.__v != FX.settingsVersion) {\n            throw new Error('Settings version mismatch.');\n        }\n\n        Sanitizer.sanitizeBundle(bundleSettings);\n\n        if (clearCache) {\n            this.clearCache();\n        }\n        for (let n in bundleSettings.emitters) {\n            const preset = bundleSettings.emitters[n];\n            this.addParticleEmitter(preset.id, preset);\n        }\n        for (let n in bundleSettings.sequences) {\n            const preset = bundleSettings.sequences[n];\n            this.addEffectSequence(preset.id, preset);\n        }\n\n        this.useBlendModes = bundleSettings.useBlendModes;\n        this.maxParticles = bundleSettings.maxParticles;\n\n        return this.parseTextureCache(bundleSettings.spritesheetFilter);\n    }\n\n    /**\n     * Adds a particle emitter to the FX object.\n     *\n     * @param {string} componentId - The unique identifier for the emitter component.\n     * @param {IEmitterSettings} settings - The settings for the emitter.\n     * @throws {Error} Throws an error if the componentId already exists.\n     * @return {FX} Returns the FX object for chaining.\n     */\n    public addParticleEmitter(componentId: string, settings: IEmitterSettings): FX {\n\n        if (this._settingsCache.emitters[componentId]) throw new Error(`ComponentId '${componentId}' already exists.`);\n        this._settingsCache.emitters[componentId] = settings;\n        this._nameMaps.emitters[settings.name] = settings;\n        return this;\n    }\n\n    /**\n     * Adds an effect sequence to the component with the specified ID.\n     *\n     * @param {string} componentId - The ID of the component.\n     * @param {IEffectSequenceSettings} settings - The settings for the effect sequence.\n     * @throws {Error} If a component with the same ID already exists.\n     * @return {FX} The current instance of the FX class.\n     */\n    public addEffectSequence(componentId: string, settings: IEffectSequenceSettings): FX {\n        if (this._settingsCache.effectSequences[componentId]) throw new Error(`ComponentId '${componentId}' already exists.`);\n        this._settingsCache.effectSequences[componentId] = settings;\n        this._nameMaps.effectSequences[settings.name] = settings;\n        return this;\n    }\n\n    /**\n     * Initializes a sprite with the specified component ID and settings.\n     *\n     * @param {string} componentId - The ID of the component.\n     * @param {ISpriteSettings} settings - The settings for the sprite.\n     * @throws {Error} Throws an error if the component ID already exists.\n     * @returns {FX} Returns the current instance of the FX class.\n     */\n    public initSprite(componentId: string, settings: ISpriteSettings): FX {\n        if (this._settingsCache.sprites[componentId]) throw new Error(`ComponentId '${componentId}' already exists.`);\n        this._settingsCache.sprites[componentId] = settings;\n        return this;\n    }\n\n    /**\n     * Initializes a movie clip with the specified component ID and settings.\n     *\n     * @param {string} componentId - The unique identifier for the movie clip component.\n     * @param {IMovieClipSettings} settings - The settings for the movie clip.\n     * @return {FX} The instance of the FX class.\n     */\n    public initMovieClip(componentId: string, settings: IMovieClipSettings): FX {\n        if (this._settingsCache.mcs[componentId]) throw new Error(`ComponentId '${componentId}' already exists.`);\n        this._settingsCache.mcs[componentId] = settings;\n        return this;\n    }\n\n    /**\n     * Retrieves the movie clips from the settings cache.\n     *\n     * @return {Object} An object containing movie clip settings.\n     */\n    public getMovieClips(): { [key: string]: IMovieClipSettings } {\n        return this._settingsCache.mcs;\n    }\n\n    /**\n     * Retrieves the sprites from the settings cache.\n     *\n     * @return {Object} An object containing sprite settings.\n     */\n    public getSprites(): { [key: string]: ISpriteSettings } {\n        return this._settingsCache.sprites;\n    }\n\n    /**\n     * Adds a container to the __containers object with the specified key.\n     *\n     * @param {string} key - The key used to identify the container in the __containers object.\n     * @param {PIXI.Container} container - The container to be added.\n     */\n    public addContainer(key: string, container: PIXI.Container) {\n        this.__containers[key] = container;\n    }\n\n    /**\n     * Retrieves the EffectSequence object with the specified name.\n     *\n     * @param {string} name - The name of the EffectSequence to retrieve.\n     * @return {EffectSequence} - The EffectSequence object with the specified name.\n     */\n    public getEffectSequence(name: string): EffectSequence {\n        const settings = this._nameMaps.effectSequences[name];\n        if (!settings) throw new Error(`Settings not defined for '${name}'`);\n        return this.getEffectSequenceById(settings.id);\n    }\n\n    /**\n     * Retrieves an EffectSequence object by its component ID.\n     *\n     * @param {string} componentId - The ID of the component.\n     * @return {EffectSequence} The retrieved EffectSequence object.\n     */\n    public getEffectSequenceById(componentId: string): EffectSequence {\n        const pool = this._cache.effectSequences;\n        let effectSequence;\n\n        let settings = <IEffectSequenceSettings>this._settingsCache.effectSequences[componentId];\n        if (!settings) throw new Error(`Settings not defined for '${componentId}'`);\n\n        if (pool.length == 0) {\n            effectSequence = new EffectSequence(componentId);\n            effectSequence.__fx = this;\n        } else {\n            effectSequence = pool.pop();\n        }\n        effectSequence.__applySettings(settings);\n        return effectSequence;\n    }\n\n    /**\n     * Retrieves a particle emitter by its name.\n     *\n     * @param {string} name - The name of the particle emitter.\n     * @param {boolean} autoRecycleOnComplete - (Optional) Specifies whether the emitter should auto recycle when complete. Default is true.\n     * @param {boolean} cloneSettings - (Optional) Specifies whether the emitter settings should be cloned. Default is false.\n     * @return {ParticleEmitter} The particle emitter with the specified name.\n     */\n    public getParticleEmitter(name: string, autoRecycleOnComplete: boolean = true, cloneSettings: boolean = false): ParticleEmitter {\n        const settings = this._nameMaps.emitters[name];\n        if (!settings) throw new Error(`Settings not defined for '${name}'`);\n        return this.getParticleEmitterById(settings.id, autoRecycleOnComplete, cloneSettings);\n    }\n\n    /**\n     * Retrieves a particle emitter by its component ID.\n     *\n     * @param {string} componentId - The ID of the component.\n     * @param {boolean} autoRecycleOnComplete - Whether the emitter should automatically recycle itself when it completes.\n     * @param {boolean} cloneSettings - Whether to clone the settings object before applying them to the emitter.\n     * @return {ParticleEmitter} The retrieved particle emitter.\n     */\n    public getParticleEmitterById(componentId: string, autoRecycleOnComplete: boolean = true, cloneSettings: boolean = false): ParticleEmitter {\n        const pool = this._cache.emitters;\n        let emitter;\n\n        let settings = <IParticleSettings>this._settingsCache.emitters[componentId];\n        if (!settings) throw new Error(`Settings not defined for '${componentId}'`);\n\n        if (pool.length == 0) {\n            emitter = new ParticleEmitter(componentId);\n            emitter.__fx = this;\n        } else {\n            emitter = pool.pop();\n        }\n\n        if (cloneSettings) {\n            settings = JSON.parse(JSON.stringify(settings));\n        }\n        emitter.autoRecycleOnComplete = autoRecycleOnComplete;\n        emitter.__applySettings(settings);\n        return emitter;\n    }\n\n    /**\n     * Stops the specified particle emitter.\n     *\n     * @param {ParticleEmitter} emitter - The particle emitter to stop.\n     * @param {boolean} [dispose=false] - Whether to dispose the emitter or recycle it.\n     */\n    public stopEmitter(emitter: ParticleEmitter, dispose: boolean = false) {\n        if (emitter.list === this._effects) {\n            this._effects.remove(emitter);\n        }\n        if (dispose) {\n            emitter.dispose();\n        } else {\n            this.__recycleEmitter(emitter);\n        }\n    }\n\n    /**\n     * Stops all effects.\n     *\n     * @param {none} none - This function does not take any parameters.\n     * @return {void} This function does not return a value.\n     */\n    public stopAllEffects() {\n        const list = this._effects.toArray();\n        for (let node of list) {\n            (<BaseEffect>node).recycle();\n        }\n    }\n\n    /**\n     * Parses a sprite sheet.\n     *\n     * @param {PIXI.Spritesheet} spriteSheet - The sprite sheet to parse.\n     * @param {string} filter - Optional filter to apply to the sprite sheet.\n     * @return {IParseSpriteSheetResult} The result of parsing the sprite sheet.\n     */\n    public parseSpriteSheet(spriteSheet: PIXI.Spritesheet, filter?: string): IParseSpriteSheetResult {\n        return this.parseObject(spriteSheet.data.frames, filter);\n    }\n\n    /**\n     * Parses the texture cache and returns the result as an IParseSpriteSheetResult object.\n     *\n     * @param {string} [filter] - An optional parameter to filter the results.\n     * @returns {IParseSpriteSheetResult} - The parsed sprite sheet result.\n     */\n    public parseTextureCache(filter?: string): IParseSpriteSheetResult {\n        return this.parseObject(PIXI['Cache']['_cache'], filter);\n    }\n\n    /**\n     * Returns if the FX instance is active.\n     *\n     * @return {boolean} The value of the 'active' property.\n     */\n    public get active(): boolean {\n        return this._active;\n    }\n\n    // *********************************************************************************************\n    // * Internal\t\t\t\t\t\t\t\t\t\t\t\t\t                                        \t\t\t\t\t\t\t   *\n    // *********************************************************************************************\n\n    public __addActiveEffect(effect: BaseEffect) {\n        this._effects.add(effect);\n    }\n\n    public __removeActiveEffect(effect: BaseEffect) {\n        this._effects.remove(effect);\n    }\n\n\n    public __getSprite(componentId: string): Sprite {\n        const cache = this._cache.sprites;\n        let pool = cache[componentId];\n\n        if (cache[componentId] == null) {\n            pool = cache[componentId] = [];\n        }\n\n        if (pool.length == 0) {\n            const settings = <ISpriteSettings>this._settingsCache.sprites[componentId];\n            if (settings == null) throw new Error(`Settings not defined for '${componentId}'`);\n            const sprite = new Sprite(componentId, settings.texture, settings.anchorX, settings.anchorY);\n            sprite.__fx = this;\n            return sprite;\n        }\n        return pool.pop();\n    }\n\n    public __getMovieClip(componentId: string): MovieClip {\n        const cache = this._cache.mcs;\n        let pool = cache[componentId];\n\n        if (cache[componentId] == null) {\n            pool = cache[componentId] = [];\n        }\n\n        if (pool.length == 0) {\n            let settings = <IMovieClipSettings>this._settingsCache.mcs[componentId];\n            if (settings == null) throw new Error(`Settings not defined for '${componentId}'`);\n            const mc = new MovieClip(componentId, settings.textures, settings.anchorX, settings.anchorY);\n            mc.__fx = this;\n            return mc;\n        }\n        return pool.pop();\n    }\n\n    public __getParticle(): Particle {\n        let cache = this._cache,\n            pool = cache.particles;\n\n        if (pool.length == 0) {\n            const particle = new Particle();\n            particle.__fx = this;\n            return particle;\n        }\n        return pool.pop();\n    }\n\n    public __getEmitterCore(type: string, emitter: ParticleEmitter): BaseEmitterCore {\n        let cache = this._cache.cores;\n        let pool = cache[type];\n\n        if (pool == null) {\n            pool = cache[type] = [];\n        }\n\n        if (pool.length == 0) {\n            return new FX.__emitterCores[type](type);\n\n        }\n        return pool.pop();\n    }\n\n    public __recycleParticle(particle: Particle) {\n        this._cache.particles.push(particle);\n    }\n\n    public __recycleSprite(componentId: string, object: any) {\n        this._cache.sprites[componentId].push(object);\n    }\n\n    public __recycleMovieClip(componentId: string, object: any) {\n        this._cache.mcs[componentId].push(object);\n    }\n\n    public __recycleEmitter(emitter: ParticleEmitter) {\n        this._effects.remove(emitter);\n        this.__recycleEmitterCore(emitter.core);\n        this._cache.emitters.push(emitter);\n    }\n\n    public __recycleEffectSequence(effectSequence: EffectSequence) {\n        this._effects.remove(effectSequence);\n        this._cache.effectSequences.push(effectSequence);\n    }\n\n    public __recycleEmitterCore(core: BaseEmitterCore) {\n        this._cache.cores[core.type].push(core);\n    }\n\n    // *********************************************************************************************\n    // * Private\t\t\t\t\t\t\t\t\t\t\t\t\t                               *\n    // *********************************************************************************************\n    private parseObject(object: any, filter?: string): IParseSpriteSheetResult {\n        let frames: Map<String, PIXI.Texture>;\n\n        if (object instanceof Map) {\n            frames = new Map();\n            const mapObject = object as Map<any, any>;\n            const values = mapObject.values();\n\n            for (const [key, value] of mapObject) {\n                if (value instanceof PIXI.Texture) {\n                    frames[key] = value;\n                }\n            }\n        } else {\n            frames = object as Map<String, PIXI.Texture>;\n        }\n\n        const mcs: Record<any, any> = {};\n        const result: IParseSpriteSheetResult = { sprites: [], movieClips: [] };\n        for (let i in frames) {\n            if (filter && i.indexOf(filter) == -1) {\n                continue;\n            }\n            this.initSprite(i, { texture: i, anchorX: 0.5, anchorY: 0.5 });\n            result.sprites.push(i);\n            if (i.substr(0, 3) == 'mc_') {\n                const parts = i.split('_');\n                const group = parts[1];\n                if (mcs[group] == null) mcs[group] = [];\n                mcs[group].push(i);\n            }\n        }\n        for (let i in mcs) {\n            let textures = mcs[i];\n            result.movieClips.push(i);\n            this.initMovieClip(i, { textures: textures, anchorX: 0.5, anchorY: 0.5 });\n        }\n        return result;\n    }\n}\n\n\n// *********************************************************************************************\n// * Interfaces\t\t\t\t\t\t\t\t\t\t\t\t                                   *\n// *********************************************************************************************\n\n/**\n * Represents the base effect interface.\n */\nexport interface IBaseEffect {\n    /**\n     * The name of the effect.\n     */\n    name: string;\n    /**\n     * The unique identifier of the effect.\n     */\n    id: any;\n    /**\n     * The type of the effect.\n     */\n    type: number;\n    /**\n     * The container ID associated with the effect.\n     */\n    containerId: string;\n}\n/**\n * Interface for emitter settings\n */\nexport interface IEmitterSettings extends IBaseEffect {\n    /**\n     * Core settings for the emitter\n     */\n    core: ICoreSettings;\n    /**\n     * Minimum frequency at which particles are spawned\n     */\n    spawnFrequencyMin: number;\n    /**\n     * Maximum frequency at which particles are spawned\n     */\n    spawnFrequencyMax: number;\n    /**\n     * Settings for individual particles\n     */\n    particleSettings: IParticleSettings;\n    /**\n     * Maximum number of particles\n     */\n    maxParticles: number;\n    /**\n     * Minimum number of particles spawned at once\n     */\n    spawnCountMin: number;\n    /**\n     * Maximum number of particles spawned at once\n     */\n    spawnCountMax: number;\n    /**\n     * Duration of the emitter in seconds\n     */\n    duration: number;\n    /**\n     * Flag indicating if the emitter should run indefinitely\n     */\n    infinite: boolean;\n    /**\n     * Flag indicating if gravity should be applied to particles\n     */\n    useGravity: boolean;\n    /**\n     * Gravity value applied to particles\n     */\n    gravity: number;\n    /**\n     * Flag indicating if particles should collide with a floor\n     */\n    useFloor: boolean;\n    /**\n     * Y position of the floor\n     */\n    floorY: number;\n    /**\n     * Rotation of the emitter in degrees\n     */\n    rotation: number;\n    /**\n     * Automatic rotation of the emitter in degrees per second\n     */\n    autoRotation: number;\n    /**\n     * Array of child emitters spawned by this emitter\n     */\n    childs: IEmitterSpawn[];\n}\n\n/**\n * Interface representing an emitter spawn.\n */\nexport interface IEmitterSpawn {\n    /**\n     * Unique identifier for the spawn.\n     */\n    id: string;\n\n    /**\n     * Type of the spawn.\n     */\n    type: number;\n\n    /**\n     * Scale of the spawn.\n     */\n    scale: number;\n\n    /**\n     * Name of the spawn.\n     */\n    name: string;\n\n    /**\n     * Whether the spawn should adopt rotation.\n     */\n    adoptRotation: boolean;\n\n    /**\n     * Identifier of the container for the spawn.\n     */\n    containerId: string;\n}\n\n/**\n * Represents the spawns of an emitter at different stages.\n */\nexport interface IEmitterSpawns {\n    /**\n     * Spawns when the emitter starts.\n     */\n    onStart: IEmitterSpawn[];\n\n    /**\n     * Spawns when the emitter reaches halfway.\n     */\n    onHalfway: IEmitterSpawn[];\n\n    /**\n     * Spawns when the emitter bounces.\n     */\n    onBounce: IEmitterSpawn[];\n\n    /**\n     * Spawns when the emitter completes.\n     */\n    onComplete: IEmitterSpawn[];\n}\n\n/**\n * Represents the settings for an effect sequence.\n */\nexport interface IEffectSequenceSettings extends IBaseEffect {\n    /**\n     * The effects in the sequence.\n     */\n    effects: IEffectSettings[];\n\n    /**\n     * The delay before the sequence starts.\n     */\n    delay: number;\n\n    /**\n     * The minimum scale of the effects.\n     */\n    scaleMin: number;\n\n    /**\n     * The maximum scale of the effects.\n     */\n    scaleMax: number;\n}\n\n/**\n * Represents the settings for an effect.\n */\nexport interface IEffectSettings {\n    /**\n     * The ID of the component.\n     */\n    componentId: string;\n\n    /**\n     * The type of the component.\n     */\n    componentType: EffectSequenceComponentType;\n\n    /**\n     * The delay before the effect starts.\n     */\n    delay: number;\n\n    /**\n     * The parameters of the component.\n     */\n    componentParams: IMovieClipComponentParams | IBaseComponentParams;\n\n    /**\n     * The minimum scale of the effect.\n     */\n    scaleMin: number;\n\n    /**\n     * The maximum scale of the effect.\n     */\n    scaleMax: number;\n\n    /**\n     * The minimum alpha of the effect.\n     */\n    alphaMin: number;\n\n    /**\n     * The maximum alpha of the effect.\n     */\n    alphaMax: number;\n\n    /**\n     * The minimum rotation of the effect.\n     */\n    rotationMin: number;\n\n    /**\n     * The maximum rotation of the effect.\n     */\n    rotationMax: number;\n\n    /**\n     * The blend mode of the effect.\n     */\n    blendMode: number;\n\n    /**\n     * The tint of the effect.\n     */\n    tint: number;\n\n    /**\n     * The duration of the effect.\n     */\n    duration: number;\n\n    /**\n     * The ID of the container.\n     */\n    containerId: string;\n\n    /**\n     * The trigger value of the effect.\n     */\n    triggerValue: string;\n}\n\n/**\n * Represents the settings for a sprite.\n */\nexport interface ISpriteSettings {\n    /**\n     * The texture of the sprite.\n     */\n    texture: string;\n\n    /**\n     * The X anchor of the sprite.\n     */\n    anchorX: number;\n\n    /**\n     * The Y anchor of the sprite.\n     */\n    anchorY: number;\n}\n\n/**\n * Interface for MovieClip settings.\n */\nexport interface IMovieClipSettings {\n    /**\n     * Array of texture strings.\n     */\n    textures: string[];\n\n    /**\n     * X-coordinate of the anchor point.\n     */\n    anchorX: number;\n\n    /**\n     * Y-coordinate of the anchor point.\n     */\n    anchorY: number;\n}\n\n/**\n * Interface for core settings.\n */\nexport interface ICoreSettings {\n    /**\n     * Type of core.\n     */\n    type: string;\n\n    /**\n     * Parameters for the core.\n     */\n    params: ICircleCoreParams | IRingCoreParams | IBoxCoreParams;\n}\n\n/**\n * Interface for circle core parameters.\n */\nexport interface ICircleCoreParams {\n    /**\n     * Radius of the circle.\n     */\n    radius: number;\n\n    /**\n     * Flag indicating if the core is radial.\n     */\n    radial: boolean;\n\n    /**\n     * Angle of the core.\n     */\n    angle: number;\n}\n\n/**\n * Interface for ring core parameters.\n */\nexport interface IRingCoreParams {\n    /**\n     * Radius of the ring.\n     */\n    radius: number;\n\n    /**\n     * Flag indicating if the core is radial.\n     */\n    radial: boolean;\n\n    /**\n     * Angle of the core.\n     */\n    angle: number;\n\n    /**\n     * Flag indicating if the ring is uniform.\n     */\n    uniform: boolean;\n}\n\n/**\n * Interface for box core parameters.\n */\nexport interface IBoxCoreParams {\n    /**\n     * Width of the box.\n     */\n    width: number;\n\n    /**\n     * Height of the box.\n     */\n    height: number;\n\n    /**\n     * Flag indicating if the core is radial.\n     */\n    radial: boolean;\n}\n\nexport interface IParticleSettings {\n    /**\n     * The type of component.\n     */\n    componentType: ComponentType;\n\n    /**\n     * The ID of the component.\n     */\n    componentId: string;\n\n    /**\n     * The parameters for the base component.\n     */\n    componentParams: IBaseComponentParams;\n\n    /**\n     * The minimum duration of the particle.\n     */\n    durationMin: number;\n\n    /**\n     * The maximum duration of the particle.\n     */\n    durationMax: number;\n\n    /**\n     * Flag indicating whether motion is enabled.\n     */\n    useMotion: boolean;\n\n    /**\n     * Flag indicating whether rotation is enabled.\n     */\n    useRotation: boolean;\n\n    /**\n     * Flag indicating whether alpha is enabled.\n     */\n    useAlpha: boolean;\n\n    /**\n     * Flag indicating whether scale is enabled.\n     */\n    useScale: boolean;\n\n    /**\n     * Flag indicating whether tint is enabled.\n     */\n    useTint: boolean;\n\n    /**\n     * Flag indicating whether child particles are enabled.\n     */\n    useChilds: boolean;\n\n    /**\n     * Flag indicating whether spawn particles are enabled.\n     */\n    useSpawns: boolean;\n\n    /**\n     * The minimum distance of the particle.\n     */\n    distanceMin: number;\n\n    /**\n     * The maximum distance of the particle.\n     */\n    distanceMax: number;\n\n    /**\n     * The easing function for the distance.\n     */\n    distanceEase: string;\n\n    /**\n     * The minimum move speed of the particle.\n     */\n    moveSpeedMin: number;\n\n    /**\n     * The maximum move speed of the particle.\n     */\n    moveSpeedMax: number;\n\n    /**\n     * The minimum bounce factor of the particle.\n     */\n    bounceFacMin: number;\n\n    /**\n     * The maximum bounce factor of the particle.\n     */\n    bounceFacMax: number;\n\n    /**\n     * The minimum friction of the particle.\n     */\n    frictionMin: number;\n\n    /**\n     * The maximum friction of the particle.\n     */\n    frictionMax: number;\n\n    /**\n     * Flag indicating whether alignment is enabled.\n     */\n    align: boolean;\n\n    /**\n     * The blend mode of the particle.\n     */\n    blendMode: number;\n\n    /**\n     * Flag indicating whether the particle is rendered on top.\n     */\n    addOnTop: boolean;\n\n    /**\n     * The minimum rotation speed of the particle.\n     */\n    rotationSpeedMin: number;\n\n    /**\n     * The maximum rotation speed of the particle.\n     */\n    rotationSpeedMax: number;\n\n    /**\n     * Flag indicating whether the rotation direction is random.\n     */\n    randomRotationDirection: boolean;\n\n    /**\n     * Flag indicating whether the start rotation is random.\n     */\n    randomStartRotation: boolean;\n\n    /**\n     * Flag indicating whether fade in is enabled.\n     */\n    fadeIn: boolean;\n\n    /**\n     * The fade in duration factor of the particle.\n     */\n    fadeInDurationFac: number;\n\n    /**\n     * The easing function for the fade in.\n     */\n    fadeInEase: string;\n\n\n    /** \n     * Minimum starting alpha value\n     * @type {number}\n     */\n    alphaStartMin: number;\n\n    /**\n     * Maximum starting alpha value\n     * @type {number}\n     */\n    alphaStartMax: number;\n\n    /**\n     * Minimum ending alpha value\n     * @type {number}\n     */\n    alphaEndMin: number;\n\n    /**\n     * Maximum ending alpha value\n     * @type {number}\n     */\n    alphaEndMax: number;\n\n    /**\n     * Easing function for alpha transitions\n     * @type {string}\n     */\n    alphaEase: string;\n\n    /**\n     * Starting tint value\n     * @type {number}\n     */\n    tintStart: number;\n\n    /**\n     * Ending tint value\n     * @type {number}\n     */\n    tintEnd: number;\n\n    /**\n     * Easing function for tint transitions\n     * @type {string}\n     */\n    tintEase: string;\n\n    /**\n     * Whether to scale in or not\n     * @type {boolean}\n     */\n    scaleIn: boolean;\n\n    /**\n     * Duration factor for scale in animation\n     * @type {number}\n     */\n    scaleInDurationFac: number;\n\n    /**\n     * Easing function for scale in animation\n     * @type {string}\n     */\n    scaleInEase: string;\n\n    /**\n     * Whether to use uniform scaling or not\n     * @type {boolean}\n     */\n    uniformScale: boolean;\n\n    /**\n     * Minimum starting scale X value\n     * @type {number}\n     */\n    scaleXStartMin: number;\n\n    /**\n     * Maximum starting scale X value\n     * @type {number}\n     */\n    scaleXStartMax: number;\n\n    /**\n     * Minimum ending scale X value\n     * @type {number}\n     */\n    scaleXEndMin: number;\n\n    /**\n     * Maximum ending scale X value\n     * @type {number}\n     */\n    scaleXEndMax: number;\n\n    /**\n     * Easing function for scale X transitions\n     * @type {string}\n     */\n    scaleXEase: string;\n\n    /**\n     * Minimum starting scale Y value\n     * @type {number}\n     */\n    scaleYStartMin: number;\n\n    /**\n     * Maximum starting scale Y value\n     * @type {number}\n     */\n    scaleYStartMax: number;\n\n    /**\n     * Minimum ending scale Y value\n     * @type {number}\n     */\n    scaleYEndMin: number;\n\n    /**\n     * Maximum ending scale Y value\n     * @type {number}\n     */\n    scaleYEndMax: number;\n\n    /**\n     * Easing function for scale Y transitions\n     * @type {string}\n     */\n    scaleYEase: string;\n\n    /**\n     * Minimum starting scale value\n     * @type {number}\n     */\n    scaleStartMin: number;\n\n    /**\n     * Maximum starting scale value\n     * @type {number}\n     */\n    scaleStartMax: number;\n\n    /**\n     * Minimum ending scale value\n     * @type {number}\n     */\n    scaleEndMin: number;\n\n    /**\n     * Maximum ending scale value\n     * @type {number}\n     */\n    scaleEndMax: number;\n\n    /**\n     * Easing function for scale transitions\n     * @type {string}\n     */\n    scaleEase: string;\n\n    /**\n     * Whether to stop emitting particles on bounce\n     * @type {boolean}\n     */\n    stopOnBounce: boolean;\n\n    /**\n     * The spawn configuration\n     * @type {IEmitterSpawns}\n     */\n    spawn: IEmitterSpawns;\n\n    /**\n     * The child emitter spawns\n     * @type {IEmitterSpawn[]}\n     */\n    childs: IEmitterSpawn[];\n}\n\n/**\n * Parameters for the MovieClipComponent.\n */\nexport interface IMovieClipComponentParams extends IBaseComponentParams {\n    /**\n     * Minimum animation speed.\n     */\n    animationSpeedMin: number;\n    /**\n     * Maximum animation speed.\n     */\n    animationSpeedMax: number;\n    /**\n     * Whether the animation should loop.\n     */\n    loop: boolean;\n}\n\n/**\n * Base parameters for a component.\n */\nexport interface IBaseComponentParams {\n    /**\n     * X coordinate of the anchor point.\n     */\n    anchorX: number;\n    /**\n     * Y coordinate of the anchor point.\n     */\n    anchorY: number;\n}\n\n/**\n * Parent interface for particle emitters.\n */\nexport interface IParticleEmitterParent {\n    /**\n     * Remove a child emitter.\n     * @param emitter The emitter to remove.\n     * @returns The removed emitter.\n     */\n    __removeChildEmitter(emitter: any): any;\n}\n\n/**\n * Interface for a particle.\n */\nexport interface IParticle extends IParticleEmitterParent {\n    /**\n     * The component ID of the particle.\n     */\n    componentId: string;\n\n    /**\n     * Initialize the particle.\n     * @param emitter The particle emitter.\n     * @param def The particle settings.\n     * @param scaleMod The scale modifier.\n     * @returns The initialized particle.\n     */\n    init(emitter: ParticleEmitter, def: IParticleSettings, scaleMod?: number): IParticle;\n\n    /**\n     * Update the particle.\n     * @param dt The time delta.\n     */\n    update(dt: number): void;\n\n    /**\n     * Recycle the particle.\n     */\n    recycle(): void;\n\n    /**\n     * Dispose the particle.\n     */\n    dispose(): void;\n}\n\n/**\n * Result of parsing a sprite sheet.\n */\nexport interface IParseSpriteSheetResult {\n    /**\n     * List of sprite names.\n     */\n    sprites: string[];\n    /**\n     * List of movie clip names.\n     */\n    movieClips: string[];\n}\n\n/**\n * Additional asset information.\n */\nexport interface IAdditionalAsset {\n    /**\n     * The name of the asset.\n     */\n    name: string;\n    /**\n     * The URL of the asset.\n     */\n    url: string;\n}\n\n\n\n"],"names":["ComponentType","PIXI","EffectSequenceComponentType","node"],"mappings":"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"}